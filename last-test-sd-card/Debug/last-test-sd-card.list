
last-test-sd-card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b4  080081b4  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080081b4  080081b4  000091b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081bc  080081bc  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081bc  080081bc  000091bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081c0  080081c0  000091c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080081c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          000008f4  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000960  20000960  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f32f  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b41  00000000  00000000  000193cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  0001bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a92  00000000  00000000  0001cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023541  00000000  00000000  0001d7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001320c  00000000  00000000  00040cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf3d  00000000  00000000  00053eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121e3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dcc  00000000  00000000  00121e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00125c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fb0 	.word	0x08007fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007fb0 	.word	0x08007fb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fbc2 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f80e 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f934 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f000 f90a 	bl	8000798 <MX_DMA_Init>
  MX_RTC_Init();
 8000584:	f000 f874 	bl	8000670 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000588:	f000 f8d6 	bl	8000738 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800058c:	f004 fb36 	bl	8004bfc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Test_SD_FATFS();
 8000590:	f000 f960 	bl	8000854 <Test_SD_FATFS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x24>

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 f882 	bl	80076b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a28      	ldr	r2, [pc, #160]	@ (8000668 <SystemClock_Config+0xd0>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b23      	ldr	r3, [pc, #140]	@ (800066c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <SystemClock_Config+0xd4>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80005f4:	2305      	movs	r3, #5
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fe:	2301      	movs	r3, #1
 8000600:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000610:	23a8      	movs	r3, #168	@ 0xa8
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000618:	2307      	movs	r3, #7
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fa4d 	bl	8001ac0 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 f95e 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2105      	movs	r1, #5
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fcae 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065a:	f000 f947 	bl	80008ec <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	@ 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <MX_RTC_Init+0xc0>)
 800068a:	4a2a      	ldr	r2, [pc, #168]	@ (8000734 <MX_RTC_Init+0xc4>)
 800068c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_RTC_Init+0xc0>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <MX_RTC_Init+0xc0>)
 8000696:	227f      	movs	r2, #127	@ 0x7f
 8000698:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_RTC_Init+0xc0>)
 800069c:	22ff      	movs	r2, #255	@ 0xff
 800069e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006a0:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <MX_RTC_Init+0xc0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_RTC_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_RTC_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b2:	481f      	ldr	r0, [pc, #124]	@ (8000730 <MX_RTC_Init+0xc0>)
 80006b4:	f001 ff4a 	bl	800254c <HAL_RTC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f915 	bl	80008ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	4814      	ldr	r0, [pc, #80]	@ (8000730 <MX_RTC_Init+0xc0>)
 80006de:	f001 ffb8 	bl	8002652 <HAL_RTC_SetTime>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80006e8:	f000 f900 	bl	80008ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006ec:	2301      	movs	r3, #1
 80006ee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006f0:	2301      	movs	r3, #1
 80006f2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2201      	movs	r2, #1
 8000700:	4619      	mov	r1, r3
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <MX_RTC_Init+0xc0>)
 8000704:	f002 f83f 	bl	8002786 <HAL_RTC_SetDate>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800070e:	f000 f8ed 	bl	80008ec <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <MX_RTC_Init+0xc0>)
 8000718:	f002 f95a 	bl	80029d0 <HAL_RTCEx_SetTimeStamp>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000722:	f000 f8e3 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000208 	.word	0x20000208
 8000734:	40002800 	.word	0x40002800

08000738 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	  /* USER CODE END SDIO_Init 0 */

	  /* USER CODE BEGIN SDIO_Init 1 */

	  /* USER CODE END SDIO_Init 1 */
	  hsd.Instance = SDIO;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	@ (8000794 <MX_SDIO_SD_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
	  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
	  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
	  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
	  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
	  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
	  hsd.Init.ClockDiv = 2;
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 8000762:	2202      	movs	r2, #2
 8000764:	619a      	str	r2, [r3, #24]
	  /* USER CODE BEGIN SDIO_Init 2 */
	  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000766:	480a      	ldr	r0, [pc, #40]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 8000768:	f002 f999 	bl	8002a9e <HAL_SD_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SDIO_SD_Init+0x3e>
	      {
	        Error_Handler();
 8000772:	f000 f8bb 	bl	80008ec <Error_Handler>
	      }
	      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000776:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_SDIO_SD_Init+0x58>)
 800077c:	f002 ff68 	bl	8003650 <HAL_SD_ConfigWideBusOperation>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SDIO_SD_Init+0x52>
	      {
	        Error_Handler();
 8000786:	f000 f8b1 	bl	80008ec <Error_Handler>
	      }
	  /* USER CODE END SDIO_Init 2 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000228 	.word	0x20000228
 8000794:	40012c00 	.word	0x40012c00

08000798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_DMA_Init+0x4c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <MX_DMA_Init+0x4c>)
 80007a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <MX_DMA_Init+0x4c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	203b      	movs	r0, #59	@ 0x3b
 80007c0:	f000 fc0d 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007c4:	203b      	movs	r0, #59	@ 0x3b
 80007c6:	f000 fc26 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2045      	movs	r0, #69	@ 0x45
 80007d0:	f000 fc05 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007d4:	2045      	movs	r0, #69	@ 0x45
 80007d6:	f000 fc1e 	bl	8001016 <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <MX_GPIO_Init+0x68>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a16      	ldr	r2, [pc, #88]	@ (8000850 <MX_GPIO_Init+0x68>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_GPIO_Init+0x68>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_GPIO_Init+0x68>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a0f      	ldr	r2, [pc, #60]	@ (8000850 <MX_GPIO_Init+0x68>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <MX_GPIO_Init+0x68>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_GPIO_Init+0x68>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a08      	ldr	r2, [pc, #32]	@ (8000850 <MX_GPIO_Init+0x68>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_GPIO_Init+0x68>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <Test_SD_FATFS>:

/* USER CODE BEGIN 4 */
void Test_SD_FATFS(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

	UINT BytesW, BytesR; //File read/write count
//	char testBuffer[200] = { 0 };
//	printf("\n\r\tTest presence de la carte SD \n\r");
	if (f_mount(&SDFatFS, SDPath, 1) == FR_OK) {
 800085a:	2201      	movs	r2, #1
 800085c:	491b      	ldr	r1, [pc, #108]	@ (80008cc <Test_SD_FATFS+0x78>)
 800085e:	481c      	ldr	r0, [pc, #112]	@ (80008d0 <Test_SD_FATFS+0x7c>)
 8000860:	f006 f94e 	bl	8006b00 <f_mount>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d12b      	bne.n	80008c2 <Test_SD_FATFS+0x6e>
		sprintf(filename, "test.txt");
 800086a:	491a      	ldr	r1, [pc, #104]	@ (80008d4 <Test_SD_FATFS+0x80>)
 800086c:	481a      	ldr	r0, [pc, #104]	@ (80008d8 <Test_SD_FATFS+0x84>)
 800086e:	f006 feff 	bl	8007670 <siprintf>

		f_open(&SDFile, filename, FA_OPEN_ALWAYS | FA_READ);
 8000872:	2211      	movs	r2, #17
 8000874:	4918      	ldr	r1, [pc, #96]	@ (80008d8 <Test_SD_FATFS+0x84>)
 8000876:	4819      	ldr	r0, [pc, #100]	@ (80008dc <Test_SD_FATFS+0x88>)
 8000878:	f006 f988 	bl	8006b8c <f_open>
		f_read(&SDFile, buff, sizeof(buff), &BytesR); /* Read a chunk of file */
 800087c:	463b      	mov	r3, r7
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	4917      	ldr	r1, [pc, #92]	@ (80008e0 <Test_SD_FATFS+0x8c>)
 8000882:	4816      	ldr	r0, [pc, #88]	@ (80008dc <Test_SD_FATFS+0x88>)
 8000884:	f006 fb3c 	bl	8006f00 <f_read>
		buff[BytesR] = 0;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <Test_SD_FATFS+0x8c>)
 800088c:	2100      	movs	r1, #0
 800088e:	54d1      	strb	r1, [r2, r3]
//		printf("\n\r\t%s", buff);
		f_close(&SDFile);
 8000890:	4812      	ldr	r0, [pc, #72]	@ (80008dc <Test_SD_FATFS+0x88>)
 8000892:	f006 fe67 	bl	8007564 <f_close>

		sprintf(Text,"%s\nThis is a program testing SD Card and new",buff);
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <Test_SD_FATFS+0x8c>)
 8000898:	4912      	ldr	r1, [pc, #72]	@ (80008e4 <Test_SD_FATFS+0x90>)
 800089a:	4813      	ldr	r0, [pc, #76]	@ (80008e8 <Test_SD_FATFS+0x94>)
 800089c:	f006 fee8 	bl	8007670 <siprintf>

		f_open(&SDFile, filename, FA_OPEN_ALWAYS | FA_WRITE);
 80008a0:	2212      	movs	r2, #18
 80008a2:	490d      	ldr	r1, [pc, #52]	@ (80008d8 <Test_SD_FATFS+0x84>)
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <Test_SD_FATFS+0x88>)
 80008a6:	f006 f971 	bl	8006b8c <f_open>
//		printf("\n\r\tOuverture du fichier LOGFIL%02d.txt", index);
		f_write(&SDFile, Text, strlen(Text), &BytesW);
 80008aa:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <Test_SD_FATFS+0x94>)
 80008ac:	f7ff fc90 	bl	80001d0 <strlen>
 80008b0:	4602      	mov	r2, r0
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	490c      	ldr	r1, [pc, #48]	@ (80008e8 <Test_SD_FATFS+0x94>)
 80008b6:	4809      	ldr	r0, [pc, #36]	@ (80008dc <Test_SD_FATFS+0x88>)
 80008b8:	f006 fc61 	bl	800717e <f_write>
		f_close(&SDFile);
 80008bc:	4807      	ldr	r0, [pc, #28]	@ (80008dc <Test_SD_FATFS+0x88>)
 80008be:	f006 fe51 	bl	8007564 <f_close>

//		printf("\n\r\tfermeture du fichier LOGFIL%02d.txt", index);
	} else {
//		printf("\n\r\tError carte SD\n\r");
	}
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000378 	.word	0x20000378
 80008d0:	2000037c 	.word	0x2000037c
 80008d4:	08007fc8 	.word	0x08007fc8
 80008d8:	20000000 	.word	0x20000000
 80008dc:	200005ac 	.word	0x200005ac
 80008e0:	20000188 	.word	0x20000188
 80008e4:	08007fd4 	.word	0x08007fd4
 80008e8:	20000088 	.word	0x20000088

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a0c      	ldr	r2, [pc, #48]	@ (8000994 <HAL_RTC_MspInit+0x4c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d111      	bne.n	800098c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000968:	2302      	movs	r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800096c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000970:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fd06 	bl	8002388 <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000982:	f7ff ffb3 	bl	80008ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <HAL_RTC_MspInit+0x50>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40002800 	.word	0x40002800
 8000998:	42470e3c 	.word	0x42470e3c

0800099c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a68      	ldr	r2, [pc, #416]	@ (8000b5c <HAL_SD_MspInit+0x1c0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	f040 80c9 	bne.w	8000b52 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	4b66      	ldr	r3, [pc, #408]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c8:	4a65      	ldr	r2, [pc, #404]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 80009ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d0:	4b63      	ldr	r3, [pc, #396]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b5f      	ldr	r3, [pc, #380]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e4:	4a5e      	ldr	r2, [pc, #376]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ec:	4b5c      	ldr	r3, [pc, #368]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b58      	ldr	r3, [pc, #352]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a00:	4a57      	ldr	r2, [pc, #348]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a08:	4b55      	ldr	r3, [pc, #340]	@ (8000b60 <HAL_SD_MspInit+0x1c4>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a14:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a26:	230c      	movs	r3, #12
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	484c      	ldr	r0, [pc, #304]	@ (8000b64 <HAL_SD_MspInit+0x1c8>)
 8000a32:	f000 fea9 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a36:	2304      	movs	r3, #4
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a46:	230c      	movs	r3, #12
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4845      	ldr	r0, [pc, #276]	@ (8000b68 <HAL_SD_MspInit+0x1cc>)
 8000a52:	f000 fe99 	bl	8001788 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000a56:	4b45      	ldr	r3, [pc, #276]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a58:	4a45      	ldr	r2, [pc, #276]	@ (8000b70 <HAL_SD_MspInit+0x1d4>)
 8000a5a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a62:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a64:	4b41      	ldr	r3, [pc, #260]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b40      	ldr	r3, [pc, #256]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b3e      	ldr	r3, [pc, #248]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a76:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a7e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a80:	4b3a      	ldr	r3, [pc, #232]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a88:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8e:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a9a:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000aa0:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000aa2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000aaa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000aae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ab0:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000ab2:	f000 facb 	bl	800104c <HAL_DMA_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000abc:	f7ff ff16 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000ac4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ac6:	4a29      	ldr	r2, [pc, #164]	@ (8000b6c <HAL_SD_MspInit+0x1d0>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000ace:	4a2a      	ldr	r2, [pc, #168]	@ (8000b78 <HAL_SD_MspInit+0x1dc>)
 8000ad0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000ad4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ad8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000adc:	2240      	movs	r2, #64	@ 0x40
 8000ade:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aec:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aee:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000af0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000af4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000af8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b00:	2220      	movs	r2, #32
 8000b02:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b12:	2203      	movs	r2, #3
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b20:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b24:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b26:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b28:	f000 fa90 	bl	800104c <HAL_DMA_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000b32:	f7ff fedb 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <HAL_SD_MspInit+0x1d8>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2031      	movs	r0, #49	@ 0x31
 8000b48:	f000 fa49 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000b4c:	2031      	movs	r0, #49	@ 0x31
 8000b4e:	f000 fa62 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	@ 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40012c00 	.word	0x40012c00
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	200002ac 	.word	0x200002ac
 8000b70:	40026458 	.word	0x40026458
 8000b74:	2000030c 	.word	0x2000030c
 8000b78:	400264a0 	.word	0x400264a0

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <NMI_Handler+0x4>

08000b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <MemManage_Handler+0x4>

08000b94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd2:	f000 f8e5 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <SDIO_IRQHandler+0x10>)
 8000be2:	f002 f9d5 	bl	8002f90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000228 	.word	0x20000228

08000bf0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <DMA2_Stream3_IRQHandler+0x10>)
 8000bf6:	f000 fb51 	bl	800129c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200002ac 	.word	0x200002ac

08000c04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <DMA2_Stream6_IRQHandler+0x10>)
 8000c0a:	f000 fb47 	bl	800129c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000030c 	.word	0x2000030c

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f006 fd3a 	bl	80076c0 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	2000036c 	.word	0x2000036c
 8000c80:	20000960 	.word	0x20000960

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f006 fcf9 	bl	80076cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc49 	bl	8000570 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cec:	080081c4 	.word	0x080081c4
  ldr r2, =_sbss
 8000cf0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cf4:	20000960 	.word	0x20000960

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fde2 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000010 	.word	0x20000010
 8000d98:	20000018 	.word	0x20000018
 8000d9c:	20000014 	.word	0x20000014

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000018 	.word	0x20000018
 8000dc4:	20000370 	.word	0x20000370

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000370 	.word	0x20000370

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000018 	.word	0x20000018

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	@ (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	@ (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff feb6 	bl	8000dc8 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e099      	b.n	800119c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001088:	e00f      	b.n	80010aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800108a:	f7ff fe9d 	bl	8000dc8 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b05      	cmp	r3, #5
 8001096:	d908      	bls.n	80010aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2220      	movs	r2, #32
 800109c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e078      	b.n	800119c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e8      	bne.n	800108a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <HAL_DMA_Init+0x158>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001100:	2b04      	cmp	r3, #4
 8001102:	d107      	bne.n	8001114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110c:	4313      	orrs	r3, r2
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f023 0307 	bic.w	r3, r3, #7
 800112a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113a:	2b04      	cmp	r3, #4
 800113c:	d117      	bne.n	800116e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4313      	orrs	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fa9d 	bl	8001690 <DMA_CheckFifoParam>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2240      	movs	r2, #64	@ 0x40
 8001160:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800116a:	2301      	movs	r3, #1
 800116c:	e016      	b.n	800119c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa54 	bl	8001624 <DMA_CalcBaseAndBitshift>
 800117c:	4603      	mov	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001184:	223f      	movs	r2, #63	@ 0x3f
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	f010803f 	.word	0xf010803f

080011a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_DMA_Start_IT+0x26>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e040      	b.n	8001250 <HAL_DMA_Start_IT+0xa8>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d12f      	bne.n	8001242 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2202      	movs	r2, #2
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 f9e6 	bl	80015c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001200:	223f      	movs	r2, #63	@ 0x3f
 8001202:	409a      	lsls	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0216 	orr.w	r2, r2, #22
 8001216:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0208 	orr.w	r2, r2, #8
 800122e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e005      	b.n	800124e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800124a:	2302      	movs	r3, #2
 800124c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800124e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d004      	beq.n	8001276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00c      	b.n	8001290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2205      	movs	r2, #5
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012a8:	4b8e      	ldr	r3, [pc, #568]	@ (80014e4 <HAL_DMA_IRQHandler+0x248>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a8e      	ldr	r2, [pc, #568]	@ (80014e8 <HAL_DMA_IRQHandler+0x24c>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0a9b      	lsrs	r3, r3, #10
 80012b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c6:	2208      	movs	r2, #8
 80012c8:	409a      	lsls	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01a      	beq.n	8001308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0204 	bic.w	r2, r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f4:	2208      	movs	r2, #8
 80012f6:	409a      	lsls	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001300:	f043 0201 	orr.w	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130c:	2201      	movs	r2, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d012      	beq.n	800133e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132a:	2201      	movs	r2, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001336:	f043 0202 	orr.w	r2, r3, #2
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001342:	2204      	movs	r2, #4
 8001344:	409a      	lsls	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d012      	beq.n	8001374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00b      	beq.n	8001374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001360:	2204      	movs	r2, #4
 8001362:	409a      	lsls	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136c:	f043 0204 	orr.w	r2, r3, #4
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001378:	2210      	movs	r2, #16
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d043      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03c      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001396:	2210      	movs	r2, #16
 8001398:	409a      	lsls	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d018      	beq.n	80013de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d108      	bne.n	80013cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d024      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
 80013ca:	e01f      	b.n	800140c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01b      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
 80013dc:	e016      	b.n	800140c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d107      	bne.n	80013fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0208 	bic.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001410:	2220      	movs	r2, #32
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 808f 	beq.w	800153c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8087 	beq.w	800153c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001432:	2220      	movs	r2, #32
 8001434:	409a      	lsls	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b05      	cmp	r3, #5
 8001444:	d136      	bne.n	80014b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0216 	bic.w	r2, r2, #22
 8001454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <HAL_DMA_IRQHandler+0x1da>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0208 	bic.w	r2, r2, #8
 8001484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148a:	223f      	movs	r2, #63	@ 0x3f
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d07e      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	4798      	blx	r3
        }
        return;
 80014b2:	e079      	b.n	80015a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01d      	beq.n	80014fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10d      	bne.n	80014ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d031      	beq.n	800153c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
 80014e0:	e02c      	b.n	800153c <HAL_DMA_IRQHandler+0x2a0>
 80014e2:	bf00      	nop
 80014e4:	20000010 	.word	0x20000010
 80014e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d023      	beq.n	800153c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
 80014fc:	e01e      	b.n	800153c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10f      	bne.n	800152c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0210 	bic.w	r2, r2, #16
 800151a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	2b00      	cmp	r3, #0
 8001542:	d032      	beq.n	80015aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d022      	beq.n	8001596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2205      	movs	r2, #5
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3301      	adds	r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	d307      	bcc.n	8001584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f2      	bne.n	8001568 <HAL_DMA_IRQHandler+0x2cc>
 8001582:	e000      	b.n	8001586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
 80015a6:	e000      	b.n	80015aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80015a8:	bf00      	nop
    }
  }
}
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b40      	cmp	r3, #64	@ 0x40
 80015f4:	d108      	bne.n	8001608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001606:	e007      	b.n	8001618 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	60da      	str	r2, [r3, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3b10      	subs	r3, #16
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <DMA_CalcBaseAndBitshift+0x64>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <DMA_CalcBaseAndBitshift+0x68>)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d909      	bls.n	8001666 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	1d1a      	adds	r2, r3, #4
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	659a      	str	r2, [r3, #88]	@ 0x58
 8001664:	e007      	b.n	8001676 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	aaaaaaab 	.word	0xaaaaaaab
 800168c:	080080e4 	.word	0x080080e4

08001690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11f      	bne.n	80016ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d856      	bhi.n	800175e <DMA_CheckFifoParam+0xce>
 80016b0:	a201      	add	r2, pc, #4	@ (adr r2, 80016b8 <DMA_CheckFifoParam+0x28>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	080016db 	.word	0x080016db
 80016c0:	080016c9 	.word	0x080016c9
 80016c4:	0800175f 	.word	0x0800175f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d046      	beq.n	8001762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016d8:	e043      	b.n	8001762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016e2:	d140      	bne.n	8001766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e8:	e03d      	b.n	8001766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016f2:	d121      	bne.n	8001738 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d837      	bhi.n	800176a <DMA_CheckFifoParam+0xda>
 80016fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001700 <DMA_CheckFifoParam+0x70>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	08001711 	.word	0x08001711
 8001704:	08001717 	.word	0x08001717
 8001708:	08001711 	.word	0x08001711
 800170c:	08001729 	.word	0x08001729
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
      break;
 8001714:	e030      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d025      	beq.n	800176e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001726:	e022      	b.n	800176e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001730:	d11f      	bne.n	8001772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001736:	e01c      	b.n	8001772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d903      	bls.n	8001746 <DMA_CheckFifoParam+0xb6>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d003      	beq.n	800174c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001744:	e018      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
      break;
 800174a:	e015      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00e      	beq.n	8001776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      break;
 800175c:	e00b      	b.n	8001776 <DMA_CheckFifoParam+0xe6>
      break;
 800175e:	bf00      	nop
 8001760:	e00a      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 8001762:	bf00      	nop
 8001764:	e008      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 8001766:	bf00      	nop
 8001768:	e006      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 800176a:	bf00      	nop
 800176c:	e004      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 800176e:	bf00      	nop
 8001770:	e002      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;   
 8001772:	bf00      	nop
 8001774:	e000      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 8001776:	bf00      	nop
    }
  } 
  
  return status; 
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e16b      	b.n	8001a7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 815a 	bne.w	8001a76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d005      	beq.n	80017da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b03      	cmp	r3, #3
 8001846:	d017      	beq.n	8001878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	69b9      	ldr	r1, [r7, #24]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80b4 	beq.w	8001a76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b60      	ldr	r3, [pc, #384]	@ (8001a94 <HAL_GPIO_Init+0x30c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	4a5f      	ldr	r2, [pc, #380]	@ (8001a94 <HAL_GPIO_Init+0x30c>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191c:	6453      	str	r3, [r2, #68]	@ 0x44
 800191e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a94 <HAL_GPIO_Init+0x30c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192a:	4a5b      	ldr	r2, [pc, #364]	@ (8001a98 <HAL_GPIO_Init+0x310>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a52      	ldr	r2, [pc, #328]	@ (8001a9c <HAL_GPIO_Init+0x314>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d02b      	beq.n	80019ae <HAL_GPIO_Init+0x226>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a51      	ldr	r2, [pc, #324]	@ (8001aa0 <HAL_GPIO_Init+0x318>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d025      	beq.n	80019aa <HAL_GPIO_Init+0x222>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a50      	ldr	r2, [pc, #320]	@ (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01f      	beq.n	80019a6 <HAL_GPIO_Init+0x21e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa8 <HAL_GPIO_Init+0x320>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x21a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4e      	ldr	r2, [pc, #312]	@ (8001aac <HAL_GPIO_Init+0x324>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x216>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4d      	ldr	r2, [pc, #308]	@ (8001ab0 <HAL_GPIO_Init+0x328>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x212>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab4 <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x20e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab8 <HAL_GPIO_Init+0x330>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x20a>
 800198e:	2307      	movs	r3, #7
 8001990:	e00e      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 8001992:	2308      	movs	r3, #8
 8001994:	e00c      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 8001996:	2306      	movs	r3, #6
 8001998:	e00a      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 800199a:	2305      	movs	r3, #5
 800199c:	e008      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 800199e:	2304      	movs	r3, #4
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019a2:	2303      	movs	r3, #3
 80019a4:	e004      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019ae:	2300      	movs	r3, #0
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f002 0203 	and.w	r2, r2, #3
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	4093      	lsls	r3, r2
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c0:	4935      	ldr	r1, [pc, #212]	@ (8001a98 <HAL_GPIO_Init+0x310>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <HAL_GPIO_Init+0x334>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a32      	ldr	r2, [pc, #200]	@ (8001abc <HAL_GPIO_Init+0x334>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <HAL_GPIO_Init+0x334>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <HAL_GPIO_Init+0x334>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <HAL_GPIO_Init+0x334>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a46:	4a1d      	ldr	r2, [pc, #116]	@ (8001abc <HAL_GPIO_Init+0x334>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_GPIO_Init+0x334>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a70:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <HAL_GPIO_Init+0x334>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	f67f ae90 	bls.w	80017a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3724      	adds	r7, #36	@ 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021c00 	.word	0x40021c00
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e267      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d075      	beq.n	8001bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ade:	4b88      	ldr	r3, [pc, #544]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d00c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aea:	4b85      	ldr	r3, [pc, #532]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b82      	ldr	r3, [pc, #520]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	4b7e      	ldr	r3, [pc, #504]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d157      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e242      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x74>
 8001b26:	4b76      	ldr	r3, [pc, #472]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6f      	ldr	r2, [pc, #444]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b58:	4b69      	ldr	r3, [pc, #420]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a68      	ldr	r2, [pc, #416]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f926 	bl	8000dc8 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff f922 	bl	8000dc8 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	@ 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e207      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b5b      	ldr	r3, [pc, #364]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f912 	bl	8000dc8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff f90e 	bl	8000dc8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	@ 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1f3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b51      	ldr	r3, [pc, #324]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be2:	4b47      	ldr	r3, [pc, #284]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b44      	ldr	r3, [pc, #272]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1c7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4937      	ldr	r1, [pc, #220]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff f8c7 	bl	8000dc8 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f8c3 	bl	8000dc8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1a8      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4925      	ldr	r1, [pc, #148]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f8a6 	bl	8000dc8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff f8a2 	bl	8000dc8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e187      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f886 	bl	8000dc8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f882 	bl	8000dc8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e167      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x200>
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f86f 	bl	8000dc8 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff f86b 	bl	8000dc8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e150      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b88      	ldr	r3, [pc, #544]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8097 	beq.w	8001e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b81      	ldr	r3, [pc, #516]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d46:	4b7a      	ldr	r3, [pc, #488]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b77      	ldr	r3, [pc, #476]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b74      	ldr	r3, [pc, #464]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a73      	ldr	r2, [pc, #460]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f82b 	bl	8000dc8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff f827 	bl	8000dc8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e10c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b6a      	ldr	r3, [pc, #424]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ea>
 8001d9c:	4b64      	ldr	r3, [pc, #400]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da0:	4a63      	ldr	r2, [pc, #396]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x30c>
 8001db2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001dcc:	4b58      	ldr	r3, [pc, #352]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd0:	4a57      	ldr	r2, [pc, #348]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd8:	4b55      	ldr	r3, [pc, #340]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	4a54      	ldr	r2, [pc, #336]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7fe ffec 	bl	8000dc8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7fe ffe8 	bl	8000dc8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0cb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7fe ffd6 	bl	8000dc8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7fe ffd2 	bl	8000dc8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0b5      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	4b3e      	ldr	r3, [pc, #248]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	4a38      	ldr	r2, [pc, #224]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a1 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5e:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d05c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d141      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7fe ffa6 	bl	8000dc8 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe ffa2 	bl	8000dc8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e087      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	491b      	ldr	r1, [pc, #108]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe ff7b 	bl	8000dc8 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7fe ff77 	bl	8000dc8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e05c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x416>
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe ff64 	bl	8000dc8 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7fe ff60 	bl	8000dc8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e045      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x444>
 8001f22:	e03d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e038      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d121      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0cc      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b68      	ldr	r3, [pc, #416]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d90c      	bls.n	8001fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b65      	ldr	r3, [pc, #404]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d044      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d119      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b3f      	ldr	r3, [pc, #252]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b37      	ldr	r3, [pc, #220]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4934      	ldr	r1, [pc, #208]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7fe fe92 	bl	8000dc8 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe fe8e 	bl	8000dc8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2b      	ldr	r3, [pc, #172]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20c      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	@ (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fdf2 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	080080d4 	.word	0x080080d4
 8002174:	20000010 	.word	0x20000010
 8002178:	20000014 	.word	0x20000014

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b094      	sub	sp, #80	@ 0x50
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	647b      	str	r3, [r7, #68]	@ 0x44
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	4b79      	ldr	r3, [pc, #484]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d00d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f200 80e1 	bhi.w	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ae:	e0db      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b73      	ldr	r3, [pc, #460]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80021b4:	e0db      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b73      	ldr	r3, [pc, #460]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x208>)
 80021b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ba:	e0d8      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4b6f      	ldr	r3, [pc, #444]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c6:	4b6d      	ldr	r3, [pc, #436]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021e6:	2300      	movs	r3, #0
 80021e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002200:	0150      	lsls	r0, r2, #5
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4621      	mov	r1, r4
 8002208:	1a51      	subs	r1, r2, r1
 800220a:	6139      	str	r1, [r7, #16]
 800220c:	4629      	mov	r1, r5
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002220:	4659      	mov	r1, fp
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	4651      	mov	r1, sl
 8002226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222a:	4651      	mov	r1, sl
 800222c:	018a      	lsls	r2, r1, #6
 800222e:	4651      	mov	r1, sl
 8002230:	ebb2 0801 	subs.w	r8, r2, r1
 8002234:	4659      	mov	r1, fp
 8002236:	eb63 0901 	sbc.w	r9, r3, r1
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800224a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224e:	4690      	mov	r8, r2
 8002250:	4699      	mov	r9, r3
 8002252:	4623      	mov	r3, r4
 8002254:	eb18 0303 	adds.w	r3, r8, r3
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	462b      	mov	r3, r5
 800225c:	eb49 0303 	adc.w	r3, r9, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800226e:	4629      	mov	r1, r5
 8002270:	024b      	lsls	r3, r1, #9
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002278:	4621      	mov	r1, r4
 800227a:	024a      	lsls	r2, r1, #9
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800228c:	f7fd fff8 	bl	8000280 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002298:	e058      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	2200      	movs	r2, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	4611      	mov	r1, r2
 80022a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022aa:	623b      	str	r3, [r7, #32]
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	0159      	lsls	r1, r3, #5
 80022c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c6:	0150      	lsls	r0, r2, #5
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4641      	mov	r1, r8
 80022ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d2:	4649      	mov	r1, r9
 80022d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ec:	ebb2 040a 	subs.w	r4, r2, sl
 80022f0:	eb63 050b 	sbc.w	r5, r3, fp
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	00eb      	lsls	r3, r5, #3
 80022fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002302:	00e2      	lsls	r2, r4, #3
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	4643      	mov	r3, r8
 800230a:	18e3      	adds	r3, r4, r3
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	464b      	mov	r3, r9
 8002310:	eb45 0303 	adc.w	r3, r5, r3
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002322:	4629      	mov	r1, r5
 8002324:	028b      	lsls	r3, r1, #10
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800232c:	4621      	mov	r1, r4
 800232e:	028a      	lsls	r2, r1, #10
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	61fa      	str	r2, [r7, #28]
 800233c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002340:	f7fd ff9e 	bl	8000280 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	3301      	adds	r3, #1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800235c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800235e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 800236a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002370:	4618      	mov	r0, r3
 8002372:	3750      	adds	r7, #80	@ 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400
 8002384:	007a1200 	.word	0x007a1200

08002388 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d035      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023b0:	4b62      	ldr	r3, [pc, #392]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023b6:	f7fe fd07 	bl	8000dc8 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023be:	f7fe fd03 	bl	8000dc8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0b0      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	019a      	lsls	r2, r3, #6
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	071b      	lsls	r3, r3, #28
 80023e8:	4955      	ldr	r1, [pc, #340]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023f0:	4b52      	ldr	r3, [pc, #328]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023f6:	f7fe fce7 	bl	8000dc8 <HAL_GetTick>
 80023fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023fe:	f7fe fce3 	bl	8000dc8 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e090      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8083 	beq.w	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b44      	ldr	r3, [pc, #272]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a43      	ldr	r2, [pc, #268]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3e      	ldr	r2, [pc, #248]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002450:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002452:	f7fe fcb9 	bl	8000dc8 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7fe fcb5 	bl	8000dc8 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e062      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002478:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002480:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02f      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d028      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002496:	4b2a      	ldr	r3, [pc, #168]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800249e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024a0:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a6:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80024ac:	4a24      	ldr	r2, [pc, #144]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d114      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe fc83 	bl	8000dc8 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fc7f 	bl	8000dc8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e02a      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024f4:	d10d      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800250a:	490d      	ldr	r1, [pc, #52]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]
 8002510:	e005      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002512:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002518:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800251c:	6093      	str	r3, [r2, #8]
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002520:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	4905      	ldr	r1, [pc, #20]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800252c:	4313      	orrs	r3, r2
 800252e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	42470068 	.word	0x42470068
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000
 8002548:	42470e40 	.word	0x42470e40

0800254c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e073      	b.n	800264a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7f5b      	ldrb	r3, [r3, #29]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe f9e8 	bl	8000948 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d055      	beq.n	8002638 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	22ca      	movs	r2, #202	@ 0xca
 8002592:	625a      	str	r2, [r3, #36]	@ 0x24
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2253      	movs	r2, #83	@ 0x53
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f99d 	bl	80028dc <RTC_EnterInitMode>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d12c      	bne.n	8002606 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80025ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025be:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68d2      	ldr	r2, [r2, #12]
 80025e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6919      	ldr	r1, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	041a      	lsls	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9a4 	bl	800294a <RTC_ExitInitMode>
 8002602:	4603      	mov	r3, r0
 8002604:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d110      	bne.n	800262e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	22ff      	movs	r2, #255	@ 0xff
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24
 8002636:	e001      	b.n	800263c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002652:	b590      	push	{r4, r7, lr}
 8002654:	b087      	sub	sp, #28
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	7f1b      	ldrb	r3, [r3, #28]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_RTC_SetTime+0x1c>
 800266a:	2302      	movs	r3, #2
 800266c:	e087      	b.n	800277e <HAL_RTC_SetTime+0x12c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2202      	movs	r2, #2
 8002678:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d126      	bne.n	80026ce <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2200      	movs	r2, #0
 8002692:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f97b 	bl	8002994 <RTC_ByteToBcd2>
 800269e:	4603      	mov	r3, r0
 80026a0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f974 	bl	8002994 <RTC_ByteToBcd2>
 80026ac:	4603      	mov	r3, r0
 80026ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026b0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	789b      	ldrb	r3, [r3, #2]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f96c 	bl	8002994 <RTC_ByteToBcd2>
 80026bc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	78db      	ldrb	r3, [r3, #3]
 80026c6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	e018      	b.n	8002700 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2200      	movs	r2, #0
 80026e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	785b      	ldrb	r3, [r3, #1]
 80026ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80026ee:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80026f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	78db      	ldrb	r3, [r3, #3]
 80026fa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	22ca      	movs	r2, #202	@ 0xca
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2253      	movs	r2, #83	@ 0x53
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f8e3 	bl	80028dc <RTC_EnterInitMode>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d120      	bne.n	8002762 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800272a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800272e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800273e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f8f6 	bl	800294a <RTC_ExitInitMode>
 800275e:	4603      	mov	r3, r0
 8002760:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	22ff      	movs	r2, #255	@ 0xff
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]

  return status;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
}
 800277e:	4618      	mov	r0, r3
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}

08002786 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002786:	b590      	push	{r4, r7, lr}
 8002788:	b087      	sub	sp, #28
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	7f1b      	ldrb	r3, [r3, #28]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_RTC_SetDate+0x1c>
 800279e:	2302      	movs	r3, #2
 80027a0:	e071      	b.n	8002886 <HAL_RTC_SetDate+0x100>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2202      	movs	r2, #2
 80027ac:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10e      	bne.n	80027d2 <HAL_RTC_SetDate+0x4c>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	f023 0310 	bic.w	r3, r3, #16
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	330a      	adds	r3, #10
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11c      	bne.n	8002812 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	78db      	ldrb	r3, [r3, #3]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f8d9 	bl	8002994 <RTC_ByteToBcd2>
 80027e2:	4603      	mov	r3, r0
 80027e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f8d2 	bl	8002994 <RTC_ByteToBcd2>
 80027f0:	4603      	mov	r3, r0
 80027f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80027f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	789b      	ldrb	r3, [r3, #2]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f8ca 	bl	8002994 <RTC_ByteToBcd2>
 8002800:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002802:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e00e      	b.n	8002830 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	78db      	ldrb	r3, [r3, #3]
 8002816:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800281e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002824:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	22ca      	movs	r2, #202	@ 0xca
 8002836:	625a      	str	r2, [r3, #36]	@ 0x24
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2253      	movs	r2, #83	@ 0x53
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f84b 	bl	80028dc <RTC_EnterInitMode>
 8002846:	4603      	mov	r3, r0
 8002848:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10c      	bne.n	800286a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800285a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800285e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f872 	bl	800294a <RTC_ExitInitMode>
 8002866:	4603      	mov	r3, r0
 8002868:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	22ff      	movs	r2, #255	@ 0xff
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]

  return status;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
}
 8002886:	4618      	mov	r0, r3
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
	...

08002890 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <HAL_RTC_WaitForSynchro+0x48>)
 80028a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a4:	f7fe fa90 	bl	8000dc8 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80028aa:	e009      	b.n	80028c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028ac:	f7fe fa8c 	bl	8000dc8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028ba:	d901      	bls.n	80028c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e007      	b.n	80028d0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0ee      	beq.n	80028ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	00017f5f 	.word	0x00017f5f

080028dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d122      	bne.n	8002940 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002908:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800290a:	f7fe fa5d 	bl	8000dc8 <HAL_GetTick>
 800290e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002910:	e00c      	b.n	800292c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002912:	f7fe fa59 	bl	8000dc8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002920:	d904      	bls.n	800292c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2204      	movs	r2, #4
 8002926:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <RTC_EnterInitMode+0x64>
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d1e8      	bne.n	8002912 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002964:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff8b 	bl	8002890 <HAL_RTC_WaitForSynchro>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2204      	movs	r2, #4
 8002984:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80029a2:	e005      	b.n	80029b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	3b0a      	subs	r3, #10
 80029ae:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2b09      	cmp	r3, #9
 80029b4:	d8f6      	bhi.n	80029a4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b2db      	uxtb	r3, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_RTCEx_SetTimeStamp>:
  * @note RTC_TIMESTAMPPIN_POS1 is not applicable to the following list of devices:
  *       STM32F412xx, STM32F413xx and STM32F423xx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	7f1b      	ldrb	r3, [r3, #28]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_RTCEx_SetTimeStamp+0x1c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e052      	b.n	8002a92 <HAL_RTCEx_SetTimeStamp+0xc2>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2202      	movs	r2, #2
 80029f6:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_TSINSEL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40
  hrtc->Instance->TAFCR |= (uint32_t)(RTC_TimeStampPin);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a22:	f023 0308 	bic.w	r3, r3, #8
 8002a26:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	22ca      	movs	r2, #202	@ 0xca
 8002a36:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2253      	movs	r2, #83	@ 0x53
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8002a58:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	22ff      	movs	r2, #255	@ 0xff
 8002a82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e022      	b.n	8002af6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fd ff6a 	bl	800099c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2203      	movs	r2, #3
 8002acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f815 	bl	8002b00 <HAL_SD_InitCard>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e00a      	b.n	8002af6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b00:	b5b0      	push	{r4, r5, r7, lr}
 8002b02:	b08e      	sub	sp, #56	@ 0x38
 8002b04:	af04      	add	r7, sp, #16
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002b1c:	2376      	movs	r3, #118	@ 0x76
 8002b1e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681d      	ldr	r5, [r3, #0]
 8002b24:	466c      	mov	r4, sp
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b32:	f107 0308 	add.w	r3, r7, #8
 8002b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b38:	4628      	mov	r0, r5
 8002b3a:	f001 faeb 	bl	8004114 <SDIO_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e04f      	b.n	8002bf0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002b50:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <HAL_SD_InitCard+0xf8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fb23 	bl	80041a6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002b60:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <HAL_SD_InitCard+0xf8>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002b66:	2002      	movs	r0, #2
 8002b68:	f7fe f93a 	bl	8000de0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f001 f805 	bl	8003b7c <SD_PowerON>
 8002b72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e02e      	b.n	8002bf0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 ff24 	bl	80039e0 <SD_InitCard>
 8002b98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e01b      	b.n	8002bf0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fb82 	bl	80042ca <SDMMC_CmdBlockLength>
 8002bc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00f      	beq.n	8002bee <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_SD_InitCard+0xfc>)
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	@ 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf8:	422580a0 	.word	0x422580a0
 8002bfc:	004005ff 	.word	0x004005ff

08002c00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	@ 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0c0      	b.n	8002daa <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f040 80b9 	bne.w	8002da8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	441a      	add	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d907      	bls.n	8002c5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0a7      	b.n	8002daa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a4c      	ldr	r2, [pc, #304]	@ (8002db4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4a4b      	ldr	r2, [pc, #300]	@ (8002db8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002c8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	2200      	movs	r2, #0
 8002c94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3380      	adds	r3, #128	@ 0x80
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	025b      	lsls	r3, r3, #9
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	f7fe fa6b 	bl	80011a8 <HAL_DMA_Start_IT>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8002ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a33      	ldr	r2, [pc, #204]	@ (8002dbc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e050      	b.n	8002daa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002d08:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d002      	beq.n	8002d1c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	025b      	lsls	r3, r3, #9
 8002d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	025b      	lsls	r3, r3, #9
 8002d26:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d28:	2390      	movs	r3, #144	@ 0x90
 8002d2a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f107 0210 	add.w	r2, r7, #16
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fa95 	bl	8004272 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d90a      	bls.n	8002d64 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2282      	movs	r2, #130	@ 0x82
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 faf9 	bl	8004352 <SDMMC_CmdReadMultiBlock>
 8002d60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002d62:	e009      	b.n	8002d78 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2281      	movs	r2, #129	@ 0x81
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 facc 	bl	800430e <SDMMC_CmdReadSingleBlock>
 8002d76:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d012      	beq.n	8002da4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a0e      	ldr	r2, [pc, #56]	@ (8002dbc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002d84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e002      	b.n	8002daa <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3730      	adds	r7, #48	@ 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	080037ef 	.word	0x080037ef
 8002db8:	08003861 	.word	0x08003861
 8002dbc:	004005ff 	.word	0x004005ff
 8002dc0:	4225858c 	.word	0x4225858c

08002dc4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	@ 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0c5      	b.n	8002f78 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 80be 	bne.w	8002f76 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	441a      	add	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d907      	bls.n	8002e1e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e12:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0ac      	b.n	8002f78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2203      	movs	r2, #3
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e46:	4a4e      	ldr	r2, [pc, #312]	@ (8002f80 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f84 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002e50:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	2200      	movs	r2, #0
 8002e58:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d002      	beq.n	8002e68 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	025b      	lsls	r3, r3, #9
 8002e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d90a      	bls.n	8002e84 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22a0      	movs	r2, #160	@ 0xa0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 faad 	bl	80043da <SDMMC_CmdWriteMultiBlock>
 8002e80:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002e82:	e009      	b.n	8002e98 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2290      	movs	r2, #144	@ 0x90
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 fa80 	bl	8004396 <SDMMC_CmdWriteSingleBlock>
 8002e96:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d012      	beq.n	8002ec4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a39      	ldr	r2, [pc, #228]	@ (8002f88 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002ea4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e059      	b.n	8002f78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002ec4:	4b31      	ldr	r3, [pc, #196]	@ (8002f8c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ece:	2240      	movs	r2, #64	@ 0x40
 8002ed0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3380      	adds	r3, #128	@ 0x80
 8002efa:	461a      	mov	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	025b      	lsls	r3, r3, #9
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	f7fe f951 	bl	80011a8 <HAL_DMA_Start_IT>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01c      	beq.n	8002f46 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8002f1a:	f023 0302 	bic.w	r3, r3, #2
 8002f1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a18      	ldr	r2, [pc, #96]	@ (8002f88 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e018      	b.n	8002f78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	025b      	lsls	r3, r3, #9
 8002f50:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f52:	2390      	movs	r3, #144	@ 0x90
 8002f54:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f107 0210 	add.w	r2, r7, #16
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 f980 	bl	8004272 <SDIO_ConfigData>

      return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3730      	adds	r7, #48	@ 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	080037c5 	.word	0x080037c5
 8002f84:	08003861 	.word	0x08003861
 8002f88:	004005ff 	.word	0x004005ff
 8002f8c:	4225858c 	.word	0x4225858c

08002f90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_SD_IRQHandler+0x2e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f001 f806 	bl	8003fc8 <SD_Read_IT>
 8002fbc:	e165      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 808f 	beq.w	80030ec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8002fe6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8002fea:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d039      	beq.n	800307a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_SD_IRQHandler+0x8a>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d011      	beq.n	800303e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f9fe 	bl	8004420 <SDMMC_CmdStopTransfer>
 8003024:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f92f 	bl	800329c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003046:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <HAL_SD_IRQHandler+0xda>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f001 fe6c 	bl	8004d48 <HAL_SD_RxCpltCallback>
 8003070:	e10b      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f001 fe5e 	bl	8004d34 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003078:	e107      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8102 	beq.w	800328a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d011      	beq.n	80030b4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f001 f9c3 	bl	8004420 <SDMMC_CmdStopTransfer>
 800309a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8f4 	bl	800329c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 80e5 	bne.w	800328a <HAL_SD_IRQHandler+0x2fa>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 80df 	bne.w	800328a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0208 	bic.w	r2, r2, #8
 80030da:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 fe25 	bl	8004d34 <HAL_SD_TxCpltCallback>
}
 80030ea:	e0ce      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_SD_IRQHandler+0x17c>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 ffb0 	bl	800406a <SD_Write_IT>
 800310a:	e0be      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003112:	f240 233a 	movw	r3, #570	@ 0x23a
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80b6 	beq.w	800328a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	f043 0202 	orr.w	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	f043 0208 	orr.w	r2, r3, #8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317e:	f043 0210 	orr.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	f043 0208 	orr.w	r2, r3, #8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f240 723a 	movw	r2, #1850	@ 0x73a
 80031a8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80031b8:	f023 0302 	bic.w	r3, r3, #2
 80031bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f92c 	bl	8004420 <SDMMC_CmdStopTransfer>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f855 	bl	800329c <HAL_SD_ErrorCallback>
}
 80031f2:	e04a      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d045      	beq.n	800328a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <HAL_SD_IRQHandler+0x282>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d011      	beq.n	8003236 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003216:	4a1f      	ldr	r2, [pc, #124]	@ (8003294 <HAL_SD_IRQHandler+0x304>)
 8003218:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe f81a 	bl	8001258 <HAL_DMA_Abort_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d02f      	beq.n	800328a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fb68 	bl	8003904 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003234:	e029      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <HAL_SD_IRQHandler+0x2ba>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d011      	beq.n	800326e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <HAL_SD_IRQHandler+0x308>)
 8003250:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd fffe 	bl	8001258 <HAL_DMA_Abort_IT>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d013      	beq.n	800328a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fb83 	bl	8003972 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800326c:	e00d      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 fd4c 	bl	8004d20 <HAL_SD_AbortCallback>
}
 8003288:	e7ff      	b.n	800328a <HAL_SD_IRQHandler+0x2fa>
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	08003905 	.word	0x08003905
 8003298:	08003973 	.word	0x08003973

0800329c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032be:	0f9b      	lsrs	r3, r3, #30
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003306:	b2da      	uxtb	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003310:	0d1b      	lsrs	r3, r3, #20
 8003312:	b29a      	uxth	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800332e:	0bdb      	lsrs	r3, r3, #15
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	b2da      	uxtb	r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003340:	0b9b      	lsrs	r3, r3, #14
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	b2da      	uxtb	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003352:	0b5b      	lsrs	r3, r3, #13
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	b2da      	uxtb	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003364:	0b1b      	lsrs	r3, r3, #12
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2200      	movs	r2, #0
 8003376:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337c:	2b00      	cmp	r3, #0
 800337e:	d163      	bne.n	8003448 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003384:	009a      	lsls	r2, r3, #2
 8003386:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800338a:	4013      	ands	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003390:	0f92      	lsrs	r2, r2, #30
 8003392:	431a      	orrs	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339c:	0edb      	lsrs	r3, r3, #27
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ae:	0e1b      	lsrs	r3, r3, #24
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c0:	0d5b      	lsrs	r3, r3, #21
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033d2:	0c9b      	lsrs	r3, r3, #18
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e4:	0bdb      	lsrs	r3, r3, #15
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	7e1b      	ldrb	r3, [r3, #24]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	3302      	adds	r3, #2
 8003408:	2201      	movs	r2, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003412:	fb03 f202 	mul.w	r2, r3, r2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	7a1b      	ldrb	r3, [r3, #8]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003434:	0a52      	lsrs	r2, r2, #9
 8003436:	fb03 f202 	mul.w	r2, r3, r2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60
 8003446:	e031      	b.n	80034ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	2b01      	cmp	r3, #1
 800344e:	d11d      	bne.n	800348c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	3301      	adds	r3, #1
 800346c:	029a      	lsls	r2, r3, #10
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003480:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	661a      	str	r2, [r3, #96]	@ 0x60
 800348a:	e00f      	b.n	80034ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a58      	ldr	r2, [pc, #352]	@ (80035f4 <HAL_SD_GetCardCSD+0x344>)
 8003492:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e09d      	b.n	80035e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b0:	0b9b      	lsrs	r3, r3, #14
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c2:	09db      	lsrs	r3, r3, #7
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e4:	0fdb      	lsrs	r3, r3, #31
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	0f5b      	lsrs	r3, r3, #29
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	b2da      	uxtb	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	0d9b      	lsrs	r3, r3, #22
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	b2da      	uxtb	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003526:	0d5b      	lsrs	r3, r3, #21
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003556:	0bdb      	lsrs	r3, r3, #15
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356a:	0b9b      	lsrs	r3, r3, #14
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	0b5b      	lsrs	r3, r3, #13
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	b2da      	uxtb	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	0b1b      	lsrs	r3, r3, #12
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	b2da      	uxtb	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	0a9b      	lsrs	r3, r3, #10
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	004005ff 	.word	0x004005ff

080035f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b08e      	sub	sp, #56	@ 0x38
 8003654:	af04      	add	r7, sp, #16
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2203      	movs	r2, #3
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366c:	2b03      	cmp	r3, #3
 800366e:	d02e      	beq.n	80036ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003676:	d106      	bne.n	8003686 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	639a      	str	r2, [r3, #56]	@ 0x38
 8003684:	e029      	b.n	80036da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368c:	d10a      	bne.n	80036a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fb2a 	bl	8003ce8 <SD_WideBus_Enable>
 8003694:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80036a2:	e01a      	b.n	80036da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fb67 	bl	8003d7e <SD_WideBus_Disable>
 80036b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80036be:	e00c      	b.n	80036da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80036cc:	e005      	b.n	80036da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a26      	ldr	r2, [pc, #152]	@ (8003780 <HAL_SD_ConfigWideBusOperation+0x130>)
 80036e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80036f8:	e01f      	b.n	800373a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681d      	ldr	r5, [r3, #0]
 8003720:	466c      	mov	r4, sp
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800372a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003734:	4628      	mov	r0, r5
 8003736:	f000 fced 	bl	8004114 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fdc1 	bl	80042ca <SDMMC_CmdBlockLength>
 8003748:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003756:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003776:	4618      	mov	r0, r3
 8003778:	3728      	adds	r7, #40	@ 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bdb0      	pop	{r4, r5, r7, pc}
 800377e:	bf00      	nop
 8003780:	004005ff 	.word	0x004005ff

08003784 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa7e 	bl	8003c98 <SD_SendStatus>
 800379c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	0a5b      	lsrs	r3, r3, #9
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80037ba:	693b      	ldr	r3, [r7, #16]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	2b82      	cmp	r3, #130	@ 0x82
 8003802:	d111      	bne.n	8003828 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fe09 	bl	8004420 <SDMMC_CmdStopTransfer>
 800380e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff fd3a 	bl	800329c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0208 	bic.w	r2, r2, #8
 8003836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f001 fa79 	bl	8004d48 <HAL_SD_RxCpltCallback>
#endif
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fe9e 	bl	80015b0 <HAL_DMA_GetError>
 8003874:	4603      	mov	r3, r0
 8003876:	2b02      	cmp	r3, #2
 8003878:	d03e      	beq.n	80038f8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d002      	beq.n	8003896 <SD_DMAError+0x36>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d12d      	bne.n	80038f2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a19      	ldr	r2, [pc, #100]	@ (8003900 <SD_DMAError+0xa0>)
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80038ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff62 	bl	8003784 <HAL_SD_GetCardState>
 80038c0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b06      	cmp	r3, #6
 80038c6:	d002      	beq.n	80038ce <SD_DMAError+0x6e>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d10a      	bne.n	80038e4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fda4 	bl	8004420 <SDMMC_CmdStopTransfer>
 80038d8:	4602      	mov	r2, r0
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	431a      	orrs	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7ff fcd2 	bl	800329c <HAL_SD_ErrorCallback>
#endif
  }
}
 80038f8:	bf00      	nop
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	004005ff 	.word	0x004005ff

08003904 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f240 523a 	movw	r2, #1338	@ 0x53a
 800391a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff ff31 	bl	8003784 <HAL_SD_GetCardState>
 8003922:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b06      	cmp	r3, #6
 8003936:	d002      	beq.n	800393e <SD_DMATxAbort+0x3a>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10a      	bne.n	8003954 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fd6c 	bl	8004420 <SDMMC_CmdStopTransfer>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	431a      	orrs	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f001 f9df 	bl	8004d20 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003962:	e002      	b.n	800396a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fc99 	bl	800329c <HAL_SD_ErrorCallback>
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003988:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fefa 	bl	8003784 <HAL_SD_GetCardState>
 8003990:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d002      	beq.n	80039ac <SD_DMARxAbort+0x3a>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d10a      	bne.n	80039c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fd35 	bl	8004420 <SDMMC_CmdStopTransfer>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f001 f9a8 	bl	8004d20 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80039d0:	e002      	b.n	80039d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fc62 	bl	800329c <HAL_SD_ErrorCallback>
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b094      	sub	sp, #80	@ 0x50
 80039e4:	af04      	add	r7, sp, #16
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80039e8:	2301      	movs	r3, #1
 80039ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fbe6 	bl	80041c2 <SDIO_GetPowerState>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039fc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a00:	e0b8      	b.n	8003b74 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d02f      	beq.n	8003a6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fe10 	bl	8004634 <SDMMC_CmdSendCID>
 8003a14:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <SD_InitCard+0x40>
    {
      return errorstate;
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1e:	e0a9      	b.n	8003b74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc10 	bl	800424c <SDIO_GetResponse>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2104      	movs	r1, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fc07 	bl	800424c <SDIO_GetResponse>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2108      	movs	r1, #8
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fbfe 	bl	800424c <SDIO_GetResponse>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	210c      	movs	r1, #12
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fbf5 	bl	800424c <SDIO_GetResponse>
 8003a62:	4602      	mov	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d00d      	beq.n	8003a8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f107 020e 	add.w	r2, r7, #14
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fe16 	bl	80046ae <SDMMC_CmdSetRelAdd>
 8003a82:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <SD_InitCard+0xae>
    {
      return errorstate;
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8c:	e072      	b.n	8003b74 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d036      	beq.n	8003b04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003a96:	89fb      	ldrh	r3, [r7, #14]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 fde0 	bl	8004670 <SDMMC_CmdSendCSD>
 8003ab0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aba:	e05b      	b.n	8003b74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fbc2 	bl	800424c <SDIO_GetResponse>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fbb9 	bl	800424c <SDIO_GetResponse>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2108      	movs	r1, #8
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fbb0 	bl	800424c <SDIO_GetResponse>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	210c      	movs	r1, #12
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fba7 	bl	800424c <SDIO_GetResponse>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2104      	movs	r1, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fb9e 	bl	800424c <SDIO_GetResponse>
 8003b10:	4603      	mov	r3, r0
 8003b12:	0d1a      	lsrs	r2, r3, #20
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fbc6 	bl	80032b0 <HAL_SD_GetCardCSD>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b2e:	e021      	b.n	8003b74 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	461c      	mov	r4, r3
 8003b3e:	4615      	mov	r5, r2
 8003b40:	4622      	mov	r2, r4
 8003b42:	462b      	mov	r3, r5
 8003b44:	4608      	mov	r0, r1
 8003b46:	f000 fc8d 	bl	8004464 <SDMMC_CmdSelDesel>
 8003b4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <SD_InitCard+0x176>
  {
    return errorstate;
 8003b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b54:	e00e      	b.n	8003b74 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681d      	ldr	r5, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	466c      	mov	r4, sp
 8003b5e:	f103 0210 	add.w	r2, r3, #16
 8003b62:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b68:	3304      	adds	r3, #4
 8003b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f000 fad1 	bl	8004114 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3740      	adds	r7, #64	@ 0x40
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bdb0      	pop	{r4, r5, r7, pc}

08003b7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fc88 	bl	80044aa <SDMMC_CmdGoIdleState>
 8003b9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	e072      	b.n	8003c8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fc9b 	bl	80044e6 <SDMMC_CmdOperCond>
 8003bb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fc71 	bl	80044aa <SDMMC_CmdGoIdleState>
 8003bc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <SD_PowerON+0x5e>
    {
      return errorstate;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	e05b      	b.n	8003c8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d137      	bne.n	8003c52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fc9b 	bl	8004524 <SDMMC_CmdAppCommand>
 8003bee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02d      	beq.n	8003c52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bf6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003bfa:	e047      	b.n	8003c8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fc8e 	bl	8004524 <SDMMC_CmdAppCommand>
 8003c08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <SD_PowerON+0x98>
    {
      return errorstate;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	e03b      	b.n	8003c8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	491e      	ldr	r1, [pc, #120]	@ (8003c94 <SD_PowerON+0x118>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fca4 	bl	8004568 <SDMMC_CmdAppOperCommand>
 8003c20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003c2c:	e02e      	b.n	8003c8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fb09 	bl	800424c <SDIO_GetResponse>
 8003c3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	0fdb      	lsrs	r3, r3, #31
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <SD_PowerON+0xcc>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <SD_PowerON+0xce>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]

    count++;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d802      	bhi.n	8003c62 <SD_PowerON+0xe6>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0cc      	beq.n	8003bfc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d902      	bls.n	8003c72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003c6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c70:	e00c      	b.n	8003c8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c82:	e002      	b.n	8003c8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	c1100000 	.word	0xc1100000

08003c98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ca8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003cac:	e018      	b.n	8003ce0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fd18 	bl	80046f0 <SDMMC_CmdSendStatus>
 8003cc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <SD_SendStatus+0x34>
  {
    return errorstate;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	e009      	b.n	8003ce0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 faba 	bl	800424c <SDIO_GetResponse>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 faa4 	bl	800424c <SDIO_GetResponse>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d0e:	d102      	bne.n	8003d16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003d10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d14:	e02f      	b.n	8003d76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f879 	bl	8003e14 <SD_FindSCR>
 8003d22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	e023      	b.n	8003d76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01c      	beq.n	8003d72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f000 fbed 	bl	8004524 <SDMMC_CmdAppCommand>
 8003d4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	e00f      	b.n	8003d76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fc26 	bl	80045ae <SDMMC_CmdBusWidth>
 8003d62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	e003      	b.n	8003d76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e001      	b.n	8003d76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fa59 	bl	800424c <SDIO_GetResponse>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003da4:	d102      	bne.n	8003dac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003da6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003daa:	e02f      	b.n	8003e0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f82e 	bl	8003e14 <SD_FindSCR>
 8003db8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	e023      	b.n	8003e0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01c      	beq.n	8003e08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f000 fba2 	bl	8004524 <SDMMC_CmdAppCommand>
 8003de0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	e00f      	b.n	8003e0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fbdb 	bl	80045ae <SDMMC_CmdBusWidth>
 8003df8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	e003      	b.n	8003e0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e001      	b.n	8003e0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b08f      	sub	sp, #60	@ 0x3c
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003e1e:	f7fc ffd3 	bl	8000dc8 <HAL_GetTick>
 8003e22:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2108      	movs	r1, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fa45 	bl	80042ca <SDMMC_CmdBlockLength>
 8003e40:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	e0b9      	b.n	8003fc0 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 fb63 	bl	8004524 <SDMMC_CmdAppCommand>
 8003e5e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e68:	e0aa      	b.n	8003fc0 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003e70:	2308      	movs	r3, #8
 8003e72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003e74:	2330      	movs	r3, #48	@ 0x30
 8003e76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f107 0210 	add.w	r2, r7, #16
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f9ef 	bl	8004272 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fbaa 	bl	80045f2 <SDMMC_CmdSendSCR>
 8003e9e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d02a      	beq.n	8003efc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	e08a      	b.n	8003fc0 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	f107 0208 	add.w	r2, r7, #8
 8003ec4:	18d4      	adds	r4, r2, r3
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	f000 f94f 	bl	800416a <SDIO_ReadFIFO>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	6023      	str	r3, [r4, #0]
      index++;
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed6:	e006      	b.n	8003ee6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003ee6:	f7fc ff6f 	bl	8000dc8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d102      	bne.n	8003efc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003ef6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003efa:	e061      	b.n	8003fc0 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f02:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0cf      	beq.n	8003eaa <SD_FindSCR+0x96>
 8003f0a:	e000      	b.n	8003f0e <SD_FindSCR+0xfa>
      break;
 8003f0c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <SD_FindSCR+0x116>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003f32:	2308      	movs	r3, #8
 8003f34:	e044      	b.n	8003fc0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e037      	b.n	8003fc0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2220      	movs	r2, #32
 8003f64:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003f66:	2320      	movs	r3, #32
 8003f68:	e02a      	b.n	8003fc0 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	061a      	lsls	r2, r3, #24
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003f80:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003f8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	0e1b      	lsrs	r3, r3, #24
 8003f90:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f94:	601a      	str	r2, [r3, #0]
    scr++;
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f98:	3304      	adds	r3, #4
 8003f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	061a      	lsls	r2, r3, #24
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003fa8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003fb2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	0e1b      	lsrs	r3, r3, #24
 8003fb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fbc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	373c      	adds	r7, #60	@ 0x3c
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}

08003fc8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d03f      	beq.n	8004062 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e033      	b.n	8004050 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f8bc 	bl	800416a <SDIO_ReadFIFO>
 8003ff2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	3b01      	subs	r3, #1
 8004006:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3b01      	subs	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3301      	adds	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3b01      	subs	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	0e1b      	lsrs	r3, r3, #24
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3b01      	subs	r3, #1
 8004048:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3301      	adds	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b07      	cmp	r3, #7
 8004054:	d9c8      	bls.n	8003fe8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d043      	beq.n	800410c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e037      	b.n	80040fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3b01      	subs	r3, #1
 800409a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	021a      	lsls	r2, r3, #8
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	041a      	lsls	r2, r3, #16
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	061a      	lsls	r2, r3, #24
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3301      	adds	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f107 0208 	add.w	r2, r7, #8
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f848 	bl	8004184 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3301      	adds	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9c4      	bls.n	800408a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800410c:	bf00      	nop
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004114:	b084      	sub	sp, #16
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	f107 001c 	add.w	r0, r7, #28
 8004122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800412a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800412c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800412e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004132:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004136:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800413a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800413e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800414e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	b004      	add	sp, #16
 8004168:	4770      	bx	lr

0800416a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2203      	movs	r2, #3
 80041b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0303 	and.w	r3, r3, #3
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80041fc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004202:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004208:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004218:	f023 030f 	bic.w	r3, r3, #15
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	b2db      	uxtb	r3, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3314      	adds	r3, #20
 800425a:	461a      	mov	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4413      	add	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
}  
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004298:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800429e:	431a      	orrs	r2, r3
                       Data->DPSM);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80042a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0

}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b088      	sub	sp, #32
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80042d8:	2310      	movs	r3, #16
 80042da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042dc:	2340      	movs	r3, #64	@ 0x40
 80042de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042ea:	f107 0308 	add.w	r3, r7, #8
 80042ee:	4619      	mov	r1, r3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff74 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80042f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fa:	2110      	movs	r1, #16
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fa19 	bl	8004734 <SDMMC_GetCmdResp1>
 8004302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004304:	69fb      	ldr	r3, [r7, #28]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b088      	sub	sp, #32
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800431c:	2311      	movs	r3, #17
 800431e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004320:	2340      	movs	r3, #64	@ 0x40
 8004322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800432c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff52 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	2111      	movs	r1, #17
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f9f7 	bl	8004734 <SDMMC_GetCmdResp1>
 8004346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004348:	69fb      	ldr	r3, [r7, #28]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b088      	sub	sp, #32
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004360:	2312      	movs	r3, #18
 8004362:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004364:	2340      	movs	r3, #64	@ 0x40
 8004366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800436c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004370:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff30 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	2112      	movs	r1, #18
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f9d5 	bl	8004734 <SDMMC_GetCmdResp1>
 800438a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800438c:	69fb      	ldr	r3, [r7, #28]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b088      	sub	sp, #32
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80043a4:	2318      	movs	r3, #24
 80043a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043a8:	2340      	movs	r3, #64	@ 0x40
 80043aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043b6:	f107 0308 	add.w	r3, r7, #8
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff0e 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80043c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c6:	2118      	movs	r1, #24
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f9b3 	bl	8004734 <SDMMC_GetCmdResp1>
 80043ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043d0:	69fb      	ldr	r3, [r7, #28]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3720      	adds	r7, #32
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b088      	sub	sp, #32
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80043e8:	2319      	movs	r3, #25
 80043ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043ec:	2340      	movs	r3, #64	@ 0x40
 80043ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff feec 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	2119      	movs	r1, #25
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f991 	bl	8004734 <SDMMC_GetCmdResp1>
 8004412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004414:	69fb      	ldr	r3, [r7, #28]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800442c:	230c      	movs	r3, #12
 800442e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004430:	2340      	movs	r3, #64	@ 0x40
 8004432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800443c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff feca 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800444a:	4a05      	ldr	r2, [pc, #20]	@ (8004460 <SDMMC_CmdStopTransfer+0x40>)
 800444c:	210c      	movs	r1, #12
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f970 	bl	8004734 <SDMMC_GetCmdResp1>
 8004454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004456:	69fb      	ldr	r3, [r7, #28]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	05f5e100 	.word	0x05f5e100

08004464 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	@ 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004474:	2307      	movs	r3, #7
 8004476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004478:	2340      	movs	r3, #64	@ 0x40
 800447a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004484:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004486:	f107 0310 	add.w	r3, r7, #16
 800448a:	4619      	mov	r1, r3
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fea6 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004496:	2107      	movs	r1, #7
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f94b 	bl	8004734 <SDMMC_GetCmdResp1>
 800449e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3728      	adds	r7, #40	@ 0x28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b088      	sub	sp, #32
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044c8:	f107 0308 	add.w	r3, r7, #8
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fe85 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fb65 	bl	8004ba4 <SDMMC_GetCmdError>
 80044da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044dc:	69fb      	ldr	r3, [r7, #28]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b088      	sub	sp, #32
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80044ee:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80044f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80044f4:	2308      	movs	r3, #8
 80044f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044f8:	2340      	movs	r3, #64	@ 0x40
 80044fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004504:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fe66 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 faf8 	bl	8004b08 <SDMMC_GetCmdResp7>
 8004518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800451a:	69fb      	ldr	r3, [r7, #28]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004532:	2337      	movs	r3, #55	@ 0x37
 8004534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004536:	2340      	movs	r3, #64	@ 0x40
 8004538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800453e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004542:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004544:	f107 0308 	add.w	r3, r7, #8
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff fe47 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004554:	2137      	movs	r1, #55	@ 0x37
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8ec 	bl	8004734 <SDMMC_GetCmdResp1>
 800455c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800455e:	69fb      	ldr	r3, [r7, #28]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004578:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800457e:	2329      	movs	r3, #41	@ 0x29
 8004580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004582:	2340      	movs	r3, #64	@ 0x40
 8004584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800458a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800458e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004590:	f107 0308 	add.w	r3, r7, #8
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fe21 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9ff 	bl	80049a0 <SDMMC_GetCmdResp3>
 80045a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045a4:	69fb      	ldr	r3, [r7, #28]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b088      	sub	sp, #32
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80045bc:	2306      	movs	r3, #6
 80045be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045c0:	2340      	movs	r3, #64	@ 0x40
 80045c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fe02 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80045da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045de:	2106      	movs	r1, #6
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f8a7 	bl	8004734 <SDMMC_GetCmdResp1>
 80045e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045e8:	69fb      	ldr	r3, [r7, #28]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b088      	sub	sp, #32
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80045fe:	2333      	movs	r3, #51	@ 0x33
 8004600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004602:	2340      	movs	r3, #64	@ 0x40
 8004604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800460a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800460e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004610:	f107 0308 	add.w	r3, r7, #8
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff fde1 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800461c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004620:	2133      	movs	r1, #51	@ 0x33
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f886 	bl	8004734 <SDMMC_GetCmdResp1>
 8004628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800462a:	69fb      	ldr	r3, [r7, #28]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004640:	2302      	movs	r3, #2
 8004642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004644:	23c0      	movs	r3, #192	@ 0xc0
 8004646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800464c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004650:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fdc0 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f956 	bl	8004910 <SDMMC_GetCmdResp2>
 8004664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004666:	69fb      	ldr	r3, [r7, #28]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800467e:	2309      	movs	r3, #9
 8004680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004682:	23c0      	movs	r3, #192	@ 0xc0
 8004684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800468a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800468e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004690:	f107 0308 	add.w	r3, r7, #8
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fda1 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f937 	bl	8004910 <SDMMC_GetCmdResp2>
 80046a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046a4:	69fb      	ldr	r3, [r7, #28]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b088      	sub	sp, #32
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80046bc:	2303      	movs	r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046c0:	2340      	movs	r3, #64	@ 0x40
 80046c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fd82 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	2103      	movs	r1, #3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f99c 	bl	8004a1c <SDMMC_GetCmdResp6>
 80046e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046e6:	69fb      	ldr	r3, [r7, #28]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80046fe:	230d      	movs	r3, #13
 8004700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004702:	2340      	movs	r3, #64	@ 0x40
 8004704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800470a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800470e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004710:	f107 0308 	add.w	r3, r7, #8
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fd61 	bl	80041de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800471c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004720:	210d      	movs	r1, #13
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f806 	bl	8004734 <SDMMC_GetCmdResp1>
 8004728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800472a:	69fb      	ldr	r3, [r7, #28]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	460b      	mov	r3, r1
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004742:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <SDMMC_GetCmdResp1+0x1d0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a70      	ldr	r2, [pc, #448]	@ (8004908 <SDMMC_GetCmdResp1+0x1d4>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	0a5a      	lsrs	r2, r3, #9
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004760:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004764:	e0c9      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0ef      	beq.n	8004756 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ea      	bne.n	8004756 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2204      	movs	r2, #4
 8004790:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004792:	2304      	movs	r3, #4
 8004794:	e0b1      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0a6      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	22c5      	movs	r2, #197	@ 0xc5
 80047b0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7ff fd3d 	bl	8004232 <SDIO_GetCommandResponse>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	7afb      	ldrb	r3, [r7, #11]
 80047be:	4293      	cmp	r3, r2
 80047c0:	d001      	beq.n	80047c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e099      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80047c6:	2100      	movs	r1, #0
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fd3f 	bl	800424c <SDIO_GetResponse>
 80047ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4b4e      	ldr	r3, [pc, #312]	@ (800490c <SDMMC_GetCmdResp1+0x1d8>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80047da:	2300      	movs	r3, #0
 80047dc:	e08d      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	da02      	bge.n	80047ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80047e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047e8:	e087      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80047f4:	2340      	movs	r3, #64	@ 0x40
 80047f6:	e080      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004802:	2380      	movs	r3, #128	@ 0x80
 8004804:	e079      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004814:	e071      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004820:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004824:	e069      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004834:	e061      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004840:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004844:	e059      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004854:	e051      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004864:	e049      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004870:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004874:	e041      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004880:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004884:	e039      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004890:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004894:	e031      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80048a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80048a4:	e029      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80048b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80048b4:	e021      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80048c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80048c4:	e019      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80048d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80048d4:	e011      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80048e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80048e4:	e009      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80048f0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80048f4:	e001      	b.n	80048fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80048f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000010 	.word	0x20000010
 8004908:	10624dd3 	.word	0x10624dd3
 800490c:	fdffe008 	.word	0xfdffe008

08004910 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <SDMMC_GetCmdResp2+0x88>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1f      	ldr	r2, [pc, #124]	@ (800499c <SDMMC_GetCmdResp2+0x8c>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0a5b      	lsrs	r3, r3, #9
 8004924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1e5a      	subs	r2, r3, #1
 8004932:	60fa      	str	r2, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004938:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800493c:	e026      	b.n	800498c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004942:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ef      	beq.n	800492e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ea      	bne.n	800492e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2204      	movs	r2, #4
 8004968:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800496a:	2304      	movs	r3, #4
 800496c:	e00e      	b.n	800498c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004980:	2301      	movs	r3, #1
 8004982:	e003      	b.n	800498c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	22c5      	movs	r2, #197	@ 0xc5
 8004988:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	20000010 	.word	0x20000010
 800499c:	10624dd3 	.word	0x10624dd3

080049a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a14 <SDMMC_GetCmdResp3+0x74>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <SDMMC_GetCmdResp3+0x78>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a5b      	lsrs	r3, r3, #9
 80049b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	60fa      	str	r2, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80049cc:	e01b      	b.n	8004a06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0ef      	beq.n	80049be <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ea      	bne.n	80049be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2204      	movs	r2, #4
 80049f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049fa:	2304      	movs	r3, #4
 80049fc:	e003      	b.n	8004a06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	22c5      	movs	r2, #197	@ 0xc5
 8004a02:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000010 	.word	0x20000010
 8004a18:	10624dd3 	.word	0x10624dd3

08004a1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	460b      	mov	r3, r1
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a2a:	4b35      	ldr	r3, [pc, #212]	@ (8004b00 <SDMMC_GetCmdResp6+0xe4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <SDMMC_GetCmdResp6+0xe8>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	0a5b      	lsrs	r3, r3, #9
 8004a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	61fa      	str	r2, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004a4e:	e052      	b.n	8004af6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a54:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ef      	beq.n	8004a40 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ea      	bne.n	8004a40 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d004      	beq.n	8004a80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	e03a      	b.n	8004af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e02f      	b.n	8004af6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff fbcb 	bl	8004232 <SDIO_GetCommandResponse>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d001      	beq.n	8004aaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e025      	b.n	8004af6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	22c5      	movs	r2, #197	@ 0xc5
 8004aae:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff fbca 	bl	800424c <SDIO_GetResponse>
 8004ab8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e011      	b.n	8004af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ae0:	e009      	b.n	8004af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004af0:	e001      	b.n	8004af6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000010 	.word	0x20000010
 8004b04:	10624dd3 	.word	0x10624dd3

08004b08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b10:	4b22      	ldr	r3, [pc, #136]	@ (8004b9c <SDMMC_GetCmdResp7+0x94>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a22      	ldr	r2, [pc, #136]	@ (8004ba0 <SDMMC_GetCmdResp7+0x98>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	0a5b      	lsrs	r3, r3, #9
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b20:	fb02 f303 	mul.w	r3, r2, r3
 8004b24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	60fa      	str	r2, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004b34:	e02c      	b.n	8004b90 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ef      	beq.n	8004b26 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ea      	bne.n	8004b26 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b62:	2304      	movs	r3, #4
 8004b64:	e014      	b.n	8004b90 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e009      	b.n	8004b90 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2240      	movs	r2, #64	@ 0x40
 8004b8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b8e:	2300      	movs	r3, #0
  
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000010 	.word	0x20000010
 8004ba0:	10624dd3 	.word	0x10624dd3

08004ba4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bac:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <SDMMC_GetCmdError+0x50>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <SDMMC_GetCmdError+0x54>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	0a5b      	lsrs	r3, r3, #9
 8004bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004bd0:	e009      	b.n	8004be6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f1      	beq.n	8004bc2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	22c5      	movs	r2, #197	@ 0xc5
 8004be2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000010 	.word	0x20000010
 8004bf8:	10624dd3 	.word	0x10624dd3

08004bfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004c00:	4904      	ldr	r1, [pc, #16]	@ (8004c14 <MX_FATFS_Init+0x18>)
 8004c02:	4805      	ldr	r0, [pc, #20]	@ (8004c18 <MX_FATFS_Init+0x1c>)
 8004c04:	f002 fd24 	bl	8007650 <FATFS_LinkDriver>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b03      	ldr	r3, [pc, #12]	@ (8004c1c <MX_FATFS_Init+0x20>)
 8004c0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004c10:	bf00      	nop
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20000378 	.word	0x20000378
 8004c18:	080080ec 	.word	0x080080ec
 8004c1c:	20000374 	.word	0x20000374

08004c20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004c24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004c3a:	f000 f896 	bl	8004d6a <BSP_SD_IsDetected>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e012      	b.n	8004c6e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004c48:	480b      	ldr	r0, [pc, #44]	@ (8004c78 <BSP_SD_Init+0x48>)
 8004c4a:	f7fd ff28 	bl	8002a9e <HAL_SD_Init>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004c58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c5c:	4806      	ldr	r0, [pc, #24]	@ (8004c78 <BSP_SD_Init+0x48>)
 8004c5e:	f7fe fcf7 	bl	8003650 <HAL_SD_ConfigWideBusOperation>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000228 	.word	0x20000228

08004c7c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	4806      	ldr	r0, [pc, #24]	@ (8004cac <BSP_SD_ReadBlocks_DMA+0x30>)
 8004c94:	f7fd ffb4 	bl	8002c00 <HAL_SD_ReadBlocks_DMA>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000228 	.word	0x20000228

08004cb0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	68f9      	ldr	r1, [r7, #12]
 8004cc6:	4806      	ldr	r0, [pc, #24]	@ (8004ce0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004cc8:	f7fe f87c 	bl	8002dc4 <HAL_SD_WriteBlocks_DMA>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000228 	.word	0x20000228

08004ce4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004ce8:	4805      	ldr	r0, [pc, #20]	@ (8004d00 <BSP_SD_GetCardState+0x1c>)
 8004cea:	f7fe fd4b 	bl	8003784 <HAL_SD_GetCardState>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000228 	.word	0x20000228

08004d04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4803      	ldr	r0, [pc, #12]	@ (8004d1c <BSP_SD_GetCardInfo+0x18>)
 8004d10:	f7fe fc72 	bl	80035f8 <HAL_SD_GetCardInfo>
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000228 	.word	0x20000228

08004d20 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004d28:	f000 f818 	bl	8004d5c <BSP_SD_AbortCallback>
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004d3c:	f000 f98c 	bl	8005058 <BSP_SD_WriteCpltCallback>
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004d50:	f000 f98e 	bl	8005070 <BSP_SD_ReadCpltCallback>
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0

}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004d70:	2301      	movs	r3, #1
 8004d72:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	b2db      	uxtb	r3, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004d8c:	f7fc f81c 	bl	8000dc8 <HAL_GetTick>
 8004d90:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004d92:	e006      	b.n	8004da2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004d94:	f7ff ffa6 	bl	8004ce4 <BSP_SD_GetCardState>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e009      	b.n	8004db6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004da2:	f7fc f811 	bl	8000dc8 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d8f0      	bhi.n	8004d94 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004dca:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <SD_CheckStatus+0x38>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004dd0:	f7ff ff88 	bl	8004ce4 <BSP_SD_GetCardState>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004dda:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <SD_CheckStatus+0x38>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <SD_CheckStatus+0x38>)
 8004de8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004dea:	4b03      	ldr	r3, [pc, #12]	@ (8004df8 <SD_CheckStatus+0x38>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	b2db      	uxtb	r3, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000019 	.word	0x20000019

08004dfc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004e06:	f7ff ff13 	bl	8004c30 <BSP_SD_Init>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d107      	bne.n	8004e20 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff ffd4 	bl	8004dc0 <SD_CheckStatus>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <SD_initialize+0x34>)
 8004e1e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <SD_initialize+0x34>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000019 	.word	0x20000019

08004e34 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff ffbd 	bl	8004dc0 <SD_CheckStatus>
 8004e46:	4603      	mov	r3, r0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004e64:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004e68:	f7ff ff8c 	bl	8004d84 <SD_CheckStatusWithTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da01      	bge.n	8004e76 <SD_read+0x26>
  {
    return res;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	e03b      	b.n	8004eee <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	68b8      	ldr	r0, [r7, #8]
 8004e7c:	f7ff fefe 	bl	8004c7c <BSP_SD_ReadBlocks_DMA>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d132      	bne.n	8004eec <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004e86:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef8 <SD_read+0xa8>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004e8c:	f7fb ff9c 	bl	8000dc8 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004e92:	bf00      	nop
 8004e94:	4b18      	ldr	r3, [pc, #96]	@ (8004ef8 <SD_read+0xa8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d108      	bne.n	8004eae <SD_read+0x5e>
 8004e9c:	f7fb ff94 	bl	8000dc8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f247 522f 	movw	r2, #29999	@ 0x752f
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d9f2      	bls.n	8004e94 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004eae:	4b12      	ldr	r3, [pc, #72]	@ (8004ef8 <SD_read+0xa8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
 8004eba:	e017      	b.n	8004eec <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <SD_read+0xa8>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004ec2:	f7fb ff81 	bl	8000dc8 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ec8:	e007      	b.n	8004eda <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004eca:	f7ff ff0b 	bl	8004ce4 <BSP_SD_GetCardState>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <SD_read+0x8a>
          {
            res = RES_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004ed8:	e008      	b.n	8004eec <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004eda:	f7fb ff75 	bl	8000dc8 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d9ee      	bls.n	8004eca <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200007e0 	.word	0x200007e0

08004efc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4603      	mov	r3, r0
 8004f0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004f10:	4b24      	ldr	r3, [pc, #144]	@ (8004fa4 <SD_write+0xa8>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004f16:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004f1a:	f7ff ff33 	bl	8004d84 <SD_CheckStatusWithTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da01      	bge.n	8004f28 <SD_write+0x2c>
  {
    return res;
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	e038      	b.n	8004f9a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	68b8      	ldr	r0, [r7, #8]
 8004f2e:	f7ff febf 	bl	8004cb0 <BSP_SD_WriteBlocks_DMA>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d12f      	bne.n	8004f98 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004f38:	f7fb ff46 	bl	8000dc8 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004f3e:	bf00      	nop
 8004f40:	4b18      	ldr	r3, [pc, #96]	@ (8004fa4 <SD_write+0xa8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d108      	bne.n	8004f5a <SD_write+0x5e>
 8004f48:	f7fb ff3e 	bl	8000dc8 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f247 522f 	movw	r2, #29999	@ 0x752f
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d9f2      	bls.n	8004f40 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004f5a:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <SD_write+0xa8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	75fb      	strb	r3, [r7, #23]
 8004f66:	e017      	b.n	8004f98 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004f68:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <SD_write+0xa8>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004f6e:	f7fb ff2b 	bl	8000dc8 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004f74:	e007      	b.n	8004f86 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004f76:	f7ff feb5 	bl	8004ce4 <BSP_SD_GetCardState>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <SD_write+0x8a>
          {
            res = RES_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	75fb      	strb	r3, [r7, #23]
            break;
 8004f84:	e008      	b.n	8004f98 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004f86:	f7fb ff1f 	bl	8000dc8 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f247 522f 	movw	r2, #29999	@ 0x752f
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d9ee      	bls.n	8004f76 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	200007dc 	.word	0x200007dc

08004fa8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	@ 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	603a      	str	r2, [r7, #0]
 8004fb2:	71fb      	strb	r3, [r7, #7]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004fbe:	4b25      	ldr	r3, [pc, #148]	@ (8005054 <SD_ioctl+0xac>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <SD_ioctl+0x28>
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e03c      	b.n	800504a <SD_ioctl+0xa2>

  switch (cmd)
 8004fd0:	79bb      	ldrb	r3, [r7, #6]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d834      	bhi.n	8005040 <SD_ioctl+0x98>
 8004fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <SD_ioctl+0x34>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004ff5 	.word	0x08004ff5
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005027 	.word	0x08005027
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004ff2:	e028      	b.n	8005046 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fe83 	bl	8004d04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800500a:	e01c      	b.n	8005046 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800500c:	f107 030c 	add.w	r3, r7, #12
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fe77 	bl	8004d04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	b29a      	uxth	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005024:	e00f      	b.n	8005046 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fe6a 	bl	8004d04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	0a5a      	lsrs	r2, r3, #9
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800503e:	e002      	b.n	8005046 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005040:	2304      	movs	r3, #4
 8005042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800504a:	4618      	mov	r0, r3
 800504c:	3730      	adds	r7, #48	@ 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000019 	.word	0x20000019

08005058 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800505c:	4b03      	ldr	r3, [pc, #12]	@ (800506c <BSP_SD_WriteCpltCallback+0x14>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]
}
 8005062:	bf00      	nop
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	200007dc 	.word	0x200007dc

08005070 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005074:	4b03      	ldr	r3, [pc, #12]	@ (8005084 <BSP_SD_ReadCpltCallback+0x14>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]
}
 800507a:	bf00      	nop
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	200007e0 	.word	0x200007e0

08005088 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <disk_status+0x30>)
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	79fa      	ldrb	r2, [r7, #7]
 80050a0:	4905      	ldr	r1, [pc, #20]	@ (80050b8 <disk_status+0x30>)
 80050a2:	440a      	add	r2, r1
 80050a4:	7a12      	ldrb	r2, [r2, #8]
 80050a6:	4610      	mov	r0, r2
 80050a8:	4798      	blx	r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	2000080c 	.word	0x2000080c

080050bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005108 <disk_initialize+0x4c>)
 80050ce:	5cd3      	ldrb	r3, [r2, r3]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d114      	bne.n	80050fe <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005108 <disk_initialize+0x4c>)
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	79fa      	ldrb	r2, [r7, #7]
 80050e2:	4909      	ldr	r1, [pc, #36]	@ (8005108 <disk_initialize+0x4c>)
 80050e4:	440a      	add	r2, r1
 80050e6:	7a12      	ldrb	r2, [r2, #8]
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
 80050ec:	4603      	mov	r3, r0
 80050ee:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	4a03      	ldr	r2, [pc, #12]	@ (8005108 <disk_initialize+0x4c>)
 80050fa:	2101      	movs	r1, #1
 80050fc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	2000080c 	.word	0x2000080c

0800510c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4603      	mov	r3, r0
 800511a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <disk_read+0x3c>)
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	689c      	ldr	r4, [r3, #8]
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	4a07      	ldr	r2, [pc, #28]	@ (8005148 <disk_read+0x3c>)
 800512c:	4413      	add	r3, r2
 800512e:	7a18      	ldrb	r0, [r3, #8]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	47a0      	blx	r4
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]
  return res;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd90      	pop	{r4, r7, pc}
 8005146:	bf00      	nop
 8005148:	2000080c 	.word	0x2000080c

0800514c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <disk_write+0x3c>)
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	68dc      	ldr	r4, [r3, #12]
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	4a07      	ldr	r2, [pc, #28]	@ (8005188 <disk_write+0x3c>)
 800516c:	4413      	add	r3, r2
 800516e:	7a18      	ldrb	r0, [r3, #8]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	47a0      	blx	r4
 8005178:	4603      	mov	r3, r0
 800517a:	75fb      	strb	r3, [r7, #23]
  return res;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd90      	pop	{r4, r7, pc}
 8005186:	bf00      	nop
 8005188:	2000080c 	.word	0x2000080c

0800518c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	603a      	str	r2, [r7, #0]
 8005196:	71fb      	strb	r3, [r7, #7]
 8005198:	460b      	mov	r3, r1
 800519a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <disk_ioctl+0x38>)
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	79fa      	ldrb	r2, [r7, #7]
 80051aa:	4906      	ldr	r1, [pc, #24]	@ (80051c4 <disk_ioctl+0x38>)
 80051ac:	440a      	add	r2, r1
 80051ae:	7a10      	ldrb	r0, [r2, #8]
 80051b0:	79b9      	ldrb	r1, [r7, #6]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	4798      	blx	r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	2000080c 	.word	0x2000080c

080051c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3301      	adds	r3, #1
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	b21a      	sxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b21b      	sxth	r3, r3
 80051e4:	4313      	orrs	r3, r2
 80051e6:	b21b      	sxth	r3, r3
 80051e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80051ea:	89fb      	ldrh	r3, [r7, #14]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3303      	adds	r3, #3
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	3202      	adds	r2, #2
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	3201      	adds	r2, #1
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	7812      	ldrb	r2, [r2, #0]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005230:	68fb      	ldr	r3, [r7, #12]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	887a      	ldrh	r2, [r7, #2]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	887a      	ldrh	r2, [r7, #2]
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	1c53      	adds	r3, r2, #1
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	6179      	str	r1, [r7, #20]
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f1      	bne.n	80052e6 <mem_cpy+0x1a>
	}
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	617a      	str	r2, [r7, #20]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3b01      	subs	r3, #1
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f3      	bne.n	800531e <mem_set+0x10>
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005344:	b480      	push	{r7}
 8005346:	b089      	sub	sp, #36	@ 0x24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	61fa      	str	r2, [r7, #28]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4619      	mov	r1, r3
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	61ba      	str	r2, [r7, #24]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	1acb      	subs	r3, r1, r3
 8005370:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3b01      	subs	r3, #1
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <mem_cmp+0x40>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0eb      	beq.n	800535c <mem_cmp+0x18>

	return r;
 8005384:	697b      	ldr	r3, [r7, #20]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	@ 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800539c:	e002      	b.n	80053a4 <chk_chr+0x12>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3301      	adds	r3, #1
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <chk_chr+0x26>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d1f2      	bne.n	800539e <chk_chr+0xc>
	return *str;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	781b      	ldrb	r3, [r3, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e029      	b.n	8005430 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80053dc:	4a27      	ldr	r2, [pc, #156]	@ (800547c <chk_lock+0xb4>)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	4413      	add	r3, r2
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01d      	beq.n	8005426 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80053ea:	4a24      	ldr	r2, [pc, #144]	@ (800547c <chk_lock+0xb4>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4413      	add	r3, r2
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d116      	bne.n	800542a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80053fc:	4a1f      	ldr	r2, [pc, #124]	@ (800547c <chk_lock+0xb4>)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4413      	add	r3, r2
 8005404:	3304      	adds	r3, #4
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800540c:	429a      	cmp	r2, r3
 800540e:	d10c      	bne.n	800542a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005410:	4a1a      	ldr	r2, [pc, #104]	@ (800547c <chk_lock+0xb4>)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	4413      	add	r3, r2
 8005418:	3308      	adds	r3, #8
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005420:	429a      	cmp	r2, r3
 8005422:	d102      	bne.n	800542a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005424:	e007      	b.n	8005436 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d9d2      	bls.n	80053dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d109      	bne.n	8005450 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <chk_lock+0x80>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d101      	bne.n	800544c <chk_lock+0x84>
 8005448:	2300      	movs	r3, #0
 800544a:	e010      	b.n	800546e <chk_lock+0xa6>
 800544c:	2312      	movs	r3, #18
 800544e:	e00e      	b.n	800546e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d108      	bne.n	8005468 <chk_lock+0xa0>
 8005456:	4a09      	ldr	r2, [pc, #36]	@ (800547c <chk_lock+0xb4>)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	4413      	add	r3, r2
 800545e:	330c      	adds	r3, #12
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005466:	d101      	bne.n	800546c <chk_lock+0xa4>
 8005468:	2310      	movs	r3, #16
 800546a:	e000      	b.n	800546e <chk_lock+0xa6>
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	200007ec 	.word	0x200007ec

08005480 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005486:	2300      	movs	r3, #0
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	e002      	b.n	8005492 <enq_lock+0x12>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3301      	adds	r3, #1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d806      	bhi.n	80054a6 <enq_lock+0x26>
 8005498:	4a09      	ldr	r2, [pc, #36]	@ (80054c0 <enq_lock+0x40>)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4413      	add	r3, r2
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f2      	bne.n	800548c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	200007ec 	.word	0x200007ec

080054c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e01f      	b.n	8005514 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80054d4:	4a41      	ldr	r2, [pc, #260]	@ (80055dc <inc_lock+0x118>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d113      	bne.n	800550e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80054e6:	4a3d      	ldr	r2, [pc, #244]	@ (80055dc <inc_lock+0x118>)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4413      	add	r3, r2
 80054ee:	3304      	adds	r3, #4
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d109      	bne.n	800550e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80054fa:	4a38      	ldr	r2, [pc, #224]	@ (80055dc <inc_lock+0x118>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4413      	add	r3, r2
 8005502:	3308      	adds	r3, #8
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800550a:	429a      	cmp	r2, r3
 800550c:	d006      	beq.n	800551c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d9dc      	bls.n	80054d4 <inc_lock+0x10>
 800551a:	e000      	b.n	800551e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800551c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d132      	bne.n	800558a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e002      	b.n	8005530 <inc_lock+0x6c>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3301      	adds	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d806      	bhi.n	8005544 <inc_lock+0x80>
 8005536:	4a29      	ldr	r2, [pc, #164]	@ (80055dc <inc_lock+0x118>)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	4413      	add	r3, r2
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f2      	bne.n	800552a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d101      	bne.n	800554e <inc_lock+0x8a>
 800554a:	2300      	movs	r3, #0
 800554c:	e040      	b.n	80055d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4922      	ldr	r1, [pc, #136]	@ (80055dc <inc_lock+0x118>)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	440b      	add	r3, r1
 800555a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	491e      	ldr	r1, [pc, #120]	@ (80055dc <inc_lock+0x118>)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	440b      	add	r3, r1
 8005568:	3304      	adds	r3, #4
 800556a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	491a      	ldr	r1, [pc, #104]	@ (80055dc <inc_lock+0x118>)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	440b      	add	r3, r1
 8005578:	3308      	adds	r3, #8
 800557a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800557c:	4a17      	ldr	r2, [pc, #92]	@ (80055dc <inc_lock+0x118>)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	4413      	add	r3, r2
 8005584:	330c      	adds	r3, #12
 8005586:	2200      	movs	r2, #0
 8005588:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <inc_lock+0xe0>
 8005590:	4a12      	ldr	r2, [pc, #72]	@ (80055dc <inc_lock+0x118>)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4413      	add	r3, r2
 8005598:	330c      	adds	r3, #12
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <inc_lock+0xe0>
 80055a0:	2300      	movs	r3, #0
 80055a2:	e015      	b.n	80055d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d108      	bne.n	80055bc <inc_lock+0xf8>
 80055aa:	4a0c      	ldr	r2, [pc, #48]	@ (80055dc <inc_lock+0x118>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	330c      	adds	r3, #12
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	e001      	b.n	80055c0 <inc_lock+0xfc>
 80055bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055c0:	4906      	ldr	r1, [pc, #24]	@ (80055dc <inc_lock+0x118>)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	440b      	add	r3, r1
 80055c8:	330c      	adds	r3, #12
 80055ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3301      	adds	r3, #1
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	200007ec 	.word	0x200007ec

080055e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d825      	bhi.n	8005640 <dec_lock+0x60>
		n = Files[i].ctr;
 80055f4:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <dec_lock+0x74>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	4413      	add	r3, r2
 80055fc:	330c      	adds	r3, #12
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005602:	89fb      	ldrh	r3, [r7, #14]
 8005604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005608:	d101      	bne.n	800560e <dec_lock+0x2e>
 800560a:	2300      	movs	r3, #0
 800560c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800560e:	89fb      	ldrh	r3, [r7, #14]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <dec_lock+0x3a>
 8005614:	89fb      	ldrh	r3, [r7, #14]
 8005616:	3b01      	subs	r3, #1
 8005618:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800561a:	4a0e      	ldr	r2, [pc, #56]	@ (8005654 <dec_lock+0x74>)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4413      	add	r3, r2
 8005622:	330c      	adds	r3, #12
 8005624:	89fa      	ldrh	r2, [r7, #14]
 8005626:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005628:	89fb      	ldrh	r3, [r7, #14]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <dec_lock+0x5a>
 800562e:	4a09      	ldr	r2, [pc, #36]	@ (8005654 <dec_lock+0x74>)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	4413      	add	r3, r2
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	737b      	strb	r3, [r7, #13]
 800563e:	e001      	b.n	8005644 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005640:	2302      	movs	r3, #2
 8005642:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005644:	7b7b      	ldrb	r3, [r7, #13]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	200007ec 	.word	0x200007ec

08005658 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e010      	b.n	8005688 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005666:	4a0d      	ldr	r2, [pc, #52]	@ (800569c <clear_lock+0x44>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	4413      	add	r3, r2
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d105      	bne.n	8005682 <clear_lock+0x2a>
 8005676:	4a09      	ldr	r2, [pc, #36]	@ (800569c <clear_lock+0x44>)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	4413      	add	r3, r2
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d9eb      	bls.n	8005666 <clear_lock+0xe>
	}
}
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	200007ec 	.word	0x200007ec

080056a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	78db      	ldrb	r3, [r3, #3]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d034      	beq.n	800571e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7858      	ldrb	r0, [r3, #1]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80056c4:	2301      	movs	r3, #1
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	f7ff fd40 	bl	800514c <disk_write>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
 80056d6:	e022      	b.n	800571e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	1ad2      	subs	r2, r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d217      	bcs.n	800571e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	789b      	ldrb	r3, [r3, #2]
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	e010      	b.n	8005718 <sync_window+0x78>
					wsect += fs->fsize;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4413      	add	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7858      	ldrb	r0, [r3, #1]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800570a:	2301      	movs	r3, #1
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	f7ff fd1d 	bl	800514c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3b01      	subs	r3, #1
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d8eb      	bhi.n	80056f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d01b      	beq.n	8005778 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ffad 	bl	80056a0 <sync_window>
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d113      	bne.n	8005778 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	7858      	ldrb	r0, [r3, #1]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800575a:	2301      	movs	r3, #1
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	f7ff fcd5 	bl	800510c <disk_read>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ff87 	bl	80056a0 <sync_window>
 8005792:	4603      	mov	r3, r0
 8005794:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d158      	bne.n	800584e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d148      	bne.n	8005836 <sync_fs+0xb2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	791b      	ldrb	r3, [r3, #4]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d144      	bne.n	8005836 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3330      	adds	r3, #48	@ 0x30
 80057b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fda9 	bl	800530e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3330      	adds	r3, #48	@ 0x30
 80057c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80057c4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fd38 	bl	800523e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3330      	adds	r3, #48	@ 0x30
 80057d2:	4921      	ldr	r1, [pc, #132]	@ (8005858 <sync_fs+0xd4>)
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fd4d 	bl	8005274 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3330      	adds	r3, #48	@ 0x30
 80057de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80057e2:	491e      	ldr	r1, [pc, #120]	@ (800585c <sync_fs+0xd8>)
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fd45 	bl	8005274 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3330      	adds	r3, #48	@ 0x30
 80057ee:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7ff fd3b 	bl	8005274 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3330      	adds	r3, #48	@ 0x30
 8005802:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f7ff fd31 	bl	8005274 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7858      	ldrb	r0, [r3, #1]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582a:	2301      	movs	r3, #1
 800582c:	f7ff fc8e 	bl	800514c <disk_write>
			fs->fsi_flag = 0;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2200      	movs	r2, #0
 800583c:	2100      	movs	r1, #0
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fca4 	bl	800518c <disk_ioctl>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <sync_fs+0xca>
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	41615252 	.word	0x41615252
 800585c:	61417272 	.word	0x61417272

08005860 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	3b02      	subs	r3, #2
 800586e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	3b02      	subs	r3, #2
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d301      	bcc.n	8005880 <clust2sect+0x20>
 800587c:	2300      	movs	r3, #0
 800587e:	e008      	b.n	8005892 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	895b      	ldrh	r3, [r3, #10]
 8005884:	461a      	mov	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	fb03 f202 	mul.w	r2, r3, r2
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005890:	4413      	add	r3, r2
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d904      	bls.n	80058be <get_fat+0x20>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80058be:	2301      	movs	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e08e      	b.n	80059e2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80058c4:	f04f 33ff 	mov.w	r3, #4294967295
 80058c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d061      	beq.n	8005996 <get_fat+0xf8>
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	dc7b      	bgt.n	80059ce <get_fat+0x130>
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d002      	beq.n	80058e0 <get_fat+0x42>
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d041      	beq.n	8005962 <get_fat+0xc4>
 80058de:	e076      	b.n	80059ce <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	0a5b      	lsrs	r3, r3, #9
 80058f6:	4413      	add	r3, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	6938      	ldr	r0, [r7, #16]
 80058fc:	f7ff ff14 	bl	8005728 <move_window>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d166      	bne.n	80059d4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	60fa      	str	r2, [r7, #12]
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005918:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	0a5b      	lsrs	r3, r3, #9
 8005922:	4413      	add	r3, r2
 8005924:	4619      	mov	r1, r3
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f7ff fefe 	bl	8005728 <move_window>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d152      	bne.n	80059d8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	4313      	orrs	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <get_fat+0xba>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	e002      	b.n	800595e <get_fat+0xc0>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595e:	617b      	str	r3, [r7, #20]
			break;
 8005960:	e03f      	b.n	80059e2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	0a1b      	lsrs	r3, r3, #8
 800596a:	4413      	add	r3, r2
 800596c:	4619      	mov	r1, r3
 800596e:	6938      	ldr	r0, [r7, #16]
 8005970:	f7ff feda 	bl	8005728 <move_window>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d130      	bne.n	80059dc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005988:	4413      	add	r3, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fc1c 	bl	80051c8 <ld_word>
 8005990:	4603      	mov	r3, r0
 8005992:	617b      	str	r3, [r7, #20]
			break;
 8005994:	e025      	b.n	80059e2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	09db      	lsrs	r3, r3, #7
 800599e:	4413      	add	r3, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	6938      	ldr	r0, [r7, #16]
 80059a4:	f7ff fec0 	bl	8005728 <move_window>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d118      	bne.n	80059e0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80059bc:	4413      	add	r3, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fc1a 	bl	80051f8 <ld_dword>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059ca:	617b      	str	r3, [r7, #20]
			break;
 80059cc:	e009      	b.n	80059e2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80059ce:	2301      	movs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e006      	b.n	80059e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059d4:	bf00      	nop
 80059d6:	e004      	b.n	80059e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059d8:	bf00      	nop
 80059da:	e002      	b.n	80059e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059dc:	bf00      	nop
 80059de:	e000      	b.n	80059e2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059e0:	bf00      	nop
		}
	}

	return val;
 80059e2:	697b      	ldr	r3, [r7, #20]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b089      	sub	sp, #36	@ 0x24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80059f8:	2302      	movs	r3, #2
 80059fa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	f240 80d9 	bls.w	8005bb6 <put_fat+0x1ca>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	f080 80d3 	bcs.w	8005bb6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	f000 8096 	beq.w	8005b46 <put_fat+0x15a>
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	f300 80cb 	bgt.w	8005bb6 <put_fat+0x1ca>
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d002      	beq.n	8005a2a <put_fat+0x3e>
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d06e      	beq.n	8005b06 <put_fat+0x11a>
 8005a28:	e0c5      	b.n	8005bb6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4413      	add	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	0a5b      	lsrs	r3, r3, #9
 8005a40:	4413      	add	r3, r2
 8005a42:	4619      	mov	r1, r3
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fe6f 	bl	8005728 <move_window>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a4e:	7ffb      	ldrb	r3, [r7, #31]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 80a9 	bne.w	8005ba8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1c59      	adds	r1, r3, #1
 8005a60:	61b9      	str	r1, [r7, #24]
 8005a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a66:	4413      	add	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00d      	beq.n	8005a90 <put_fat+0xa4>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	b25b      	sxtb	r3, r3
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	b25a      	sxtb	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	e001      	b.n	8005a94 <put_fat+0xa8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	0a5b      	lsrs	r3, r3, #9
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff fe3c 	bl	8005728 <move_window>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ab4:	7ffb      	ldrb	r3, [r7, #31]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d178      	bne.n	8005bac <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	4413      	add	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <put_fat+0xf0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e00e      	b.n	8005afa <put_fat+0x10e>
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	f023 030f 	bic.w	r3, r3, #15
 8005ae6:	b25a      	sxtb	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	70da      	strb	r2, [r3, #3]
			break;
 8005b04:	e057      	b.n	8005bb6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1a      	ldr	r2, [r3, #32]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	4413      	add	r3, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff fe08 	bl	8005728 <move_window>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b1c:	7ffb      	ldrb	r3, [r7, #31]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d146      	bne.n	8005bb0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005b30:	4413      	add	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	b292      	uxth	r2, r2
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fb80 	bl	800523e <st_word>
			fs->wflag = 1;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	70da      	strb	r2, [r3, #3]
			break;
 8005b44:	e037      	b.n	8005bb6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1a      	ldr	r2, [r3, #32]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	09db      	lsrs	r3, r3, #7
 8005b4e:	4413      	add	r3, r2
 8005b50:	4619      	mov	r1, r3
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fde8 	bl	8005728 <move_window>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b5c:	7ffb      	ldrb	r3, [r7, #31]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d128      	bne.n	8005bb4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005b76:	4413      	add	r3, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fb3d 	bl	80051f8 <ld_dword>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005b84:	4323      	orrs	r3, r4
 8005b86:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005b96:	4413      	add	r3, r2
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fb6a 	bl	8005274 <st_dword>
			fs->wflag = 1;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	70da      	strb	r2, [r3, #3]
			break;
 8005ba6:	e006      	b.n	8005bb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005ba8:	bf00      	nop
 8005baa:	e004      	b.n	8005bb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005bac:	bf00      	nop
 8005bae:	e002      	b.n	8005bb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005bb4:	bf00      	nop
		}
	}
	return res;
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3724      	adds	r7, #36	@ 0x24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd90      	pop	{r4, r7, pc}

08005bc0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d904      	bls.n	8005be6 <remove_chain+0x26>
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d301      	bcc.n	8005bea <remove_chain+0x2a>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e04b      	b.n	8005c82 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	69b8      	ldr	r0, [r7, #24]
 8005bf8:	f7ff fef8 	bl	80059ec <put_fat>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005c00:	7ffb      	ldrb	r3, [r7, #31]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <remove_chain+0x4a>
 8005c06:	7ffb      	ldrb	r3, [r7, #31]
 8005c08:	e03b      	b.n	8005c82 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fe46 	bl	800589e <get_fat>
 8005c12:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d031      	beq.n	8005c7e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <remove_chain+0x64>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e02e      	b.n	8005c82 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d101      	bne.n	8005c30 <remove_chain+0x70>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e028      	b.n	8005c82 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c30:	2200      	movs	r2, #0
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	69b8      	ldr	r0, [r7, #24]
 8005c36:	f7ff fed9 	bl	80059ec <put_fat>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c3e:	7ffb      	ldrb	r3, [r7, #31]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <remove_chain+0x88>
 8005c44:	7ffb      	ldrb	r3, [r7, #31]
 8005c46:	e01c      	b.n	8005c82 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	3b02      	subs	r3, #2
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d20b      	bcs.n	8005c6e <remove_chain+0xae>
			fs->free_clst++;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	791b      	ldrb	r3, [r3, #4]
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3c6      	bcc.n	8005c0a <remove_chain+0x4a>
 8005c7c:	e000      	b.n	8005c80 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c7e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b088      	sub	sp, #32
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10d      	bne.n	8005cbc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <create_chain+0x2c>
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d31b      	bcc.n	8005cee <create_chain+0x64>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e018      	b.n	8005cee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fded 	bl	800589e <get_fat>
 8005cc4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d801      	bhi.n	8005cd0 <create_chain+0x46>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e070      	b.n	8005db2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d101      	bne.n	8005cdc <create_chain+0x52>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	e06a      	b.n	8005db2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d201      	bcs.n	8005cea <create_chain+0x60>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	e063      	b.n	8005db2 <create_chain+0x128>
		scl = clst;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d307      	bcc.n	8005d12 <create_chain+0x88>
				ncl = 2;
 8005d02:	2302      	movs	r3, #2
 8005d04:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d901      	bls.n	8005d12 <create_chain+0x88>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e04f      	b.n	8005db2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d12:	69f9      	ldr	r1, [r7, #28]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fdc2 	bl	800589e <get_fat>
 8005d1a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00e      	beq.n	8005d40 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d003      	beq.n	8005d30 <create_chain+0xa6>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d101      	bne.n	8005d34 <create_chain+0xaa>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	e03e      	b.n	8005db2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d1da      	bne.n	8005cf2 <create_chain+0x68>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e038      	b.n	8005db2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d40:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	69f9      	ldr	r1, [r7, #28]
 8005d48:	6938      	ldr	r0, [r7, #16]
 8005d4a:	f7ff fe4f 	bl	80059ec <put_fat>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <create_chain+0xe2>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6938      	ldr	r0, [r7, #16]
 8005d64:	f7ff fe42 	bl	80059ec <put_fat>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d116      	bne.n	8005da0 <create_chain+0x116>
		fs->last_clst = ncl;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	3b02      	subs	r3, #2
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d804      	bhi.n	8005d90 <create_chain+0x106>
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	1e5a      	subs	r2, r3, #1
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	791b      	ldrb	r3, [r3, #4]
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	711a      	strb	r2, [r3, #4]
 8005d9e:	e007      	b.n	8005db0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d102      	bne.n	8005dac <create_chain+0x122>
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295
 8005daa:	e000      	b.n	8005dae <create_chain+0x124>
 8005dac:	2301      	movs	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005db0:	69fb      	ldr	r3, [r7, #28]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	3304      	adds	r3, #4
 8005dd0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	8952      	ldrh	r2, [r2, #10]
 8005dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1d1a      	adds	r2, r3, #4
 8005de4:	613a      	str	r2, [r7, #16]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <clmt_clust+0x3a>
 8005df0:	2300      	movs	r3, #0
 8005df2:	e010      	b.n	8005e16 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d307      	bcc.n	8005e0c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3304      	adds	r3, #4
 8005e08:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e0a:	e7e9      	b.n	8005de0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005e0c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4413      	add	r3, r2
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e38:	d204      	bcs.n	8005e44 <dir_sdi+0x22>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e44:	2302      	movs	r3, #2
 8005e46:	e063      	b.n	8005f10 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <dir_sdi+0x46>
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d902      	bls.n	8005e68 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10c      	bne.n	8005e88 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	8912      	ldrh	r2, [r2, #8]
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d301      	bcc.n	8005e7e <dir_sdi+0x5c>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e048      	b.n	8005f10 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	61da      	str	r2, [r3, #28]
 8005e86:	e029      	b.n	8005edc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	895b      	ldrh	r3, [r3, #10]
 8005e8c:	025b      	lsls	r3, r3, #9
 8005e8e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e90:	e019      	b.n	8005ec6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6979      	ldr	r1, [r7, #20]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fd01 	bl	800589e <get_fat>
 8005e9c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d101      	bne.n	8005eaa <dir_sdi+0x88>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e032      	b.n	8005f10 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d904      	bls.n	8005eba <dir_sdi+0x98>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d301      	bcc.n	8005ebe <dir_sdi+0x9c>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e028      	b.n	8005f10 <dir_sdi+0xee>
			ofs -= csz;
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d2e1      	bcs.n	8005e92 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	6938      	ldr	r0, [r7, #16]
 8005ed2:	f7ff fcc5 	bl	8005860 <clust2sect>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <dir_sdi+0xcc>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e010      	b.n	8005f10 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	0a5b      	lsrs	r3, r3, #9
 8005ef6:	441a      	add	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f08:	441a      	add	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	3320      	adds	r3, #32
 8005f2e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <dir_next+0x28>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f3e:	d301      	bcc.n	8005f44 <dir_next+0x2c>
 8005f40:	2304      	movs	r3, #4
 8005f42:	e0aa      	b.n	800609a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 8098 	bne.w	8006080 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	8912      	ldrh	r2, [r2, #8]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	f0c0 8088 	bcc.w	8006080 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	61da      	str	r2, [r3, #28]
 8005f76:	2304      	movs	r3, #4
 8005f78:	e08f      	b.n	800609a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	0a5b      	lsrs	r3, r3, #9
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	8952      	ldrh	r2, [r2, #10]
 8005f82:	3a01      	subs	r2, #1
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d17a      	bne.n	8006080 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7ff fc83 	bl	800589e <get_fat>
 8005f98:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d801      	bhi.n	8005fa4 <dir_next+0x8c>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e07a      	b.n	800609a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d101      	bne.n	8005fb0 <dir_next+0x98>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e074      	b.n	800609a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d358      	bcc.n	800606c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	61da      	str	r2, [r3, #28]
 8005fc6:	2304      	movs	r3, #4
 8005fc8:	e067      	b.n	800609a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f7ff fe59 	bl	8005c8a <create_chain>
 8005fd8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <dir_next+0xcc>
 8005fe0:	2307      	movs	r3, #7
 8005fe2:	e05a      	b.n	800609a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <dir_next+0xd6>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e055      	b.n	800609a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d101      	bne.n	8005ffa <dir_next+0xe2>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e04f      	b.n	800609a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fb50 	bl	80056a0 <sync_window>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <dir_next+0xf2>
 8006006:	2301      	movs	r3, #1
 8006008:	e047      	b.n	800609a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3330      	adds	r3, #48	@ 0x30
 800600e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff f97a 	bl	800530e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	6979      	ldr	r1, [r7, #20]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fc1d 	bl	8005860 <clust2sect>
 8006026:	4602      	mov	r2, r0
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800602c:	e012      	b.n	8006054 <dir_next+0x13c>
						fs->wflag = 1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fb33 	bl	80056a0 <sync_window>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <dir_next+0x12c>
 8006040:	2301      	movs	r3, #1
 8006042:	e02a      	b.n	800609a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3301      	adds	r3, #1
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	895b      	ldrh	r3, [r3, #10]
 8006058:	461a      	mov	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4293      	cmp	r3, r2
 800605e:	d3e6      	bcc.n	800602e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fbf3 	bl	8005860 <clust2sect>
 800607a:	4602      	mov	r2, r0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006092:	441a      	add	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80060b2:	2100      	movs	r1, #0
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff feb4 	bl	8005e22 <dir_sdi>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d12b      	bne.n	800611c <dir_alloc+0x7a>
		n = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	4619      	mov	r1, r3
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff fb2a 	bl	8005728 <move_window>
 80060d4:	4603      	mov	r3, r0
 80060d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d11d      	bne.n	800611a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2be5      	cmp	r3, #229	@ 0xe5
 80060e6:	d004      	beq.n	80060f2 <dir_alloc+0x50>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d107      	bne.n	8006102 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	3301      	adds	r3, #1
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d102      	bne.n	8006106 <dir_alloc+0x64>
 8006100:	e00c      	b.n	800611c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006106:	2101      	movs	r1, #1
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff05 	bl	8005f18 <dir_next>
 800610e:	4603      	mov	r3, r0
 8006110:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0d7      	beq.n	80060c8 <dir_alloc+0x26>
 8006118:	e000      	b.n	800611c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800611a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	2b04      	cmp	r3, #4
 8006120:	d101      	bne.n	8006126 <dir_alloc+0x84>
 8006122:	2307      	movs	r3, #7
 8006124:	75fb      	strb	r3, [r7, #23]
	return res;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	331a      	adds	r3, #26
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff f842 	bl	80051c8 <ld_word>
 8006144:	4603      	mov	r3, r0
 8006146:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d109      	bne.n	8006164 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff f837 	bl	80051c8 <ld_word>
 800615a:	4603      	mov	r3, r0
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006164:	68fb      	ldr	r3, [r7, #12]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	331a      	adds	r3, #26
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	b292      	uxth	r2, r2
 8006182:	4611      	mov	r1, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff f85a 	bl	800523e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d109      	bne.n	80061a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f103 0214 	add.w	r2, r3, #20
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	b29b      	uxth	r3, r3
 800619e:	4619      	mov	r1, r3
 80061a0:	4610      	mov	r0, r2
 80061a2:	f7ff f84c 	bl	800523e <st_word>
	}
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80061bc:	2100      	movs	r1, #0
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fe2f 	bl	8005e22 <dir_sdi>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <dir_find+0x24>
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	e03e      	b.n	8006250 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6938      	ldr	r0, [r7, #16]
 80061da:	f7ff faa5 	bl	8005728 <move_window>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d12f      	bne.n	8006248 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <dir_find+0x4e>
 80061f6:	2304      	movs	r3, #4
 80061f8:	75fb      	strb	r3, [r7, #23]
 80061fa:	e028      	b.n	800624e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	330b      	adds	r3, #11
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006208:	b2da      	uxtb	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	330b      	adds	r3, #11
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <dir_find+0x86>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a18      	ldr	r0, [r3, #32]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3324      	adds	r3, #36	@ 0x24
 8006226:	220b      	movs	r2, #11
 8006228:	4619      	mov	r1, r3
 800622a:	f7ff f88b 	bl	8005344 <mem_cmp>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006234:	2100      	movs	r1, #0
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fe6e 	bl	8005f18 <dir_next>
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0c5      	beq.n	80061d2 <dir_find+0x24>
 8006246:	e002      	b.n	800624e <dir_find+0xa0>
		if (res != FR_OK) break;
 8006248:	bf00      	nop
 800624a:	e000      	b.n	800624e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800624c:	bf00      	nop

	return res;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006266:	2101      	movs	r1, #1
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff ff1a 	bl	80060a2 <dir_alloc>
 800626e:	4603      	mov	r3, r0
 8006270:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11c      	bne.n	80062b2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	4619      	mov	r1, r3
 800627e:	68b8      	ldr	r0, [r7, #8]
 8006280:	f7ff fa52 	bl	8005728 <move_window>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d111      	bne.n	80062b2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	2220      	movs	r2, #32
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff f839 	bl	800530e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a18      	ldr	r0, [r3, #32]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3324      	adds	r3, #36	@ 0x24
 80062a4:	220b      	movs	r2, #11
 80062a6:	4619      	mov	r1, r3
 80062a8:	f7ff f810 	bl	80052cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2201      	movs	r2, #1
 80062b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3324      	adds	r3, #36	@ 0x24
 80062d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80062d2:	220b      	movs	r2, #11
 80062d4:	2120      	movs	r1, #32
 80062d6:	68b8      	ldr	r0, [r7, #8]
 80062d8:	f7ff f819 	bl	800530e <mem_set>
	si = i = 0; ni = 8;
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	2308      	movs	r3, #8
 80062e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	61fa      	str	r2, [r7, #28]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80062f6:	7efb      	ldrb	r3, [r7, #27]
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d94e      	bls.n	800639a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80062fc:	7efb      	ldrb	r3, [r7, #27]
 80062fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8006300:	d006      	beq.n	8006310 <create_name+0x54>
 8006302:	7efb      	ldrb	r3, [r7, #27]
 8006304:	2b5c      	cmp	r3, #92	@ 0x5c
 8006306:	d110      	bne.n	800632a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006308:	e002      	b.n	8006310 <create_name+0x54>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3301      	adds	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b2f      	cmp	r3, #47	@ 0x2f
 800631a:	d0f6      	beq.n	800630a <create_name+0x4e>
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b5c      	cmp	r3, #92	@ 0x5c
 8006326:	d0f0      	beq.n	800630a <create_name+0x4e>
			break;
 8006328:	e038      	b.n	800639c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800632a:	7efb      	ldrb	r3, [r7, #27]
 800632c:	2b2e      	cmp	r3, #46	@ 0x2e
 800632e:	d003      	beq.n	8006338 <create_name+0x7c>
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	429a      	cmp	r2, r3
 8006336:	d30c      	bcc.n	8006352 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b0b      	cmp	r3, #11
 800633c:	d002      	beq.n	8006344 <create_name+0x88>
 800633e:	7efb      	ldrb	r3, [r7, #27]
 8006340:	2b2e      	cmp	r3, #46	@ 0x2e
 8006342:	d001      	beq.n	8006348 <create_name+0x8c>
 8006344:	2306      	movs	r3, #6
 8006346:	e044      	b.n	80063d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006348:	2308      	movs	r3, #8
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	230b      	movs	r3, #11
 800634e:	617b      	str	r3, [r7, #20]
			continue;
 8006350:	e022      	b.n	8006398 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006352:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006356:	2b00      	cmp	r3, #0
 8006358:	da04      	bge.n	8006364 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800635a:	7efb      	ldrb	r3, [r7, #27]
 800635c:	3b80      	subs	r3, #128	@ 0x80
 800635e:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <create_name+0x120>)
 8006360:	5cd3      	ldrb	r3, [r2, r3]
 8006362:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006364:	7efb      	ldrb	r3, [r7, #27]
 8006366:	4619      	mov	r1, r3
 8006368:	481d      	ldr	r0, [pc, #116]	@ (80063e0 <create_name+0x124>)
 800636a:	f7ff f812 	bl	8005392 <chk_chr>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <create_name+0xbc>
 8006374:	2306      	movs	r3, #6
 8006376:	e02c      	b.n	80063d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006378:	7efb      	ldrb	r3, [r7, #27]
 800637a:	2b60      	cmp	r3, #96	@ 0x60
 800637c:	d905      	bls.n	800638a <create_name+0xce>
 800637e:	7efb      	ldrb	r3, [r7, #27]
 8006380:	2b7a      	cmp	r3, #122	@ 0x7a
 8006382:	d802      	bhi.n	800638a <create_name+0xce>
 8006384:	7efb      	ldrb	r3, [r7, #27]
 8006386:	3b20      	subs	r3, #32
 8006388:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	613a      	str	r2, [r7, #16]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	4413      	add	r3, r2
 8006394:	7efa      	ldrb	r2, [r7, #27]
 8006396:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006398:	e7a6      	b.n	80062e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800639a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	441a      	add	r2, r3
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <create_name+0xf4>
 80063ac:	2306      	movs	r3, #6
 80063ae:	e010      	b.n	80063d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2be5      	cmp	r3, #229	@ 0xe5
 80063b6:	d102      	bne.n	80063be <create_name+0x102>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2205      	movs	r2, #5
 80063bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80063be:	7efb      	ldrb	r3, [r7, #27]
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d801      	bhi.n	80063c8 <create_name+0x10c>
 80063c4:	2204      	movs	r2, #4
 80063c6:	e000      	b.n	80063ca <create_name+0x10e>
 80063c8:	2200      	movs	r2, #0
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	330b      	adds	r3, #11
 80063ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80063d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	08008100 	.word	0x08008100
 80063e0:	08008090 	.word	0x08008090

080063e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80063f8:	e002      	b.n	8006400 <follow_path+0x1c>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b2f      	cmp	r3, #47	@ 0x2f
 8006406:	d0f8      	beq.n	80063fa <follow_path+0x16>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b5c      	cmp	r3, #92	@ 0x5c
 800640e:	d0f4      	beq.n	80063fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2200      	movs	r2, #0
 8006414:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b1f      	cmp	r3, #31
 800641c:	d80a      	bhi.n	8006434 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2280      	movs	r2, #128	@ 0x80
 8006422:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006426:	2100      	movs	r1, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fcfa 	bl	8005e22 <dir_sdi>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
 8006432:	e043      	b.n	80064bc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006434:	463b      	mov	r3, r7
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff ff3f 	bl	80062bc <create_name>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d134      	bne.n	80064b2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff feb0 	bl	80061ae <dir_find>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006458:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b04      	cmp	r3, #4
 8006464:	d127      	bne.n	80064b6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d122      	bne.n	80064b6 <follow_path+0xd2>
 8006470:	2305      	movs	r3, #5
 8006472:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006474:	e01f      	b.n	80064b6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006476:	7afb      	ldrb	r3, [r7, #11]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11c      	bne.n	80064ba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	799b      	ldrb	r3, [r3, #6]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800648c:	2305      	movs	r3, #5
 800648e:	75fb      	strb	r3, [r7, #23]
 8006490:	e014      	b.n	80064bc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a0:	4413      	add	r3, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fe43 	bl	8006130 <ld_clust>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064b0:	e7c0      	b.n	8006434 <follow_path+0x50>
			if (res != FR_OK) break;
 80064b2:	bf00      	nop
 80064b4:	e002      	b.n	80064bc <follow_path+0xd8>
				break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064ba:	bf00      	nop
			}
		}
	}

	return res;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
 80064d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d031      	beq.n	8006540 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e002      	b.n	80064ea <get_ldnumber+0x24>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3301      	adds	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d903      	bls.n	80064fa <get_ldnumber+0x34>
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80064f8:	d1f4      	bne.n	80064e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8006500:	d11c      	bne.n	800653c <get_ldnumber+0x76>
			tp = *path;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	60fa      	str	r2, [r7, #12]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	3b30      	subs	r3, #48	@ 0x30
 8006512:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b09      	cmp	r3, #9
 8006518:	d80e      	bhi.n	8006538 <get_ldnumber+0x72>
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	429a      	cmp	r2, r3
 8006520:	d10a      	bne.n	8006538 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d107      	bne.n	8006538 <get_ldnumber+0x72>
					vol = (int)i;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3301      	adds	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	e002      	b.n	8006542 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006540:	693b      	ldr	r3, [r7, #16]
}
 8006542:	4618      	mov	r0, r3
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	70da      	strb	r2, [r3, #3]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff f8dc 	bl	8005728 <move_window>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <check_fs+0x2a>
 8006576:	2304      	movs	r3, #4
 8006578:	e038      	b.n	80065ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3330      	adds	r3, #48	@ 0x30
 800657e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fe20 	bl	80051c8 <ld_word>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <check_fs+0x48>
 8006594:	2303      	movs	r3, #3
 8006596:	e029      	b.n	80065ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800659e:	2be9      	cmp	r3, #233	@ 0xe9
 80065a0:	d009      	beq.n	80065b6 <check_fs+0x66>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065a8:	2beb      	cmp	r3, #235	@ 0xeb
 80065aa:	d11e      	bne.n	80065ea <check_fs+0x9a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80065b2:	2b90      	cmp	r3, #144	@ 0x90
 80065b4:	d119      	bne.n	80065ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3330      	adds	r3, #48	@ 0x30
 80065ba:	3336      	adds	r3, #54	@ 0x36
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe fe1b 	bl	80051f8 <ld_dword>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80065c8:	4a0a      	ldr	r2, [pc, #40]	@ (80065f4 <check_fs+0xa4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d101      	bne.n	80065d2 <check_fs+0x82>
 80065ce:	2300      	movs	r3, #0
 80065d0:	e00c      	b.n	80065ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3330      	adds	r3, #48	@ 0x30
 80065d6:	3352      	adds	r3, #82	@ 0x52
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fe0d 	bl	80051f8 <ld_dword>
 80065de:	4603      	mov	r3, r0
 80065e0:	4a05      	ldr	r2, [pc, #20]	@ (80065f8 <check_fs+0xa8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d101      	bne.n	80065ea <check_fs+0x9a>
 80065e6:	2300      	movs	r3, #0
 80065e8:	e000      	b.n	80065ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80065ea:	2302      	movs	r3, #2
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	00544146 	.word	0x00544146
 80065f8:	33544146 	.word	0x33544146

080065fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b096      	sub	sp, #88	@ 0x58
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff ff58 	bl	80064c6 <get_ldnumber>
 8006616:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800661a:	2b00      	cmp	r3, #0
 800661c:	da01      	bge.n	8006622 <find_volume+0x26>
 800661e:	230b      	movs	r3, #11
 8006620:	e22d      	b.n	8006a7e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006622:	4aa1      	ldr	r2, [pc, #644]	@ (80068a8 <find_volume+0x2ac>)
 8006624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <find_volume+0x3a>
 8006632:	230c      	movs	r3, #12
 8006634:	e223      	b.n	8006a7e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800663a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01a      	beq.n	8006682 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fd19 	bl	8005088 <disk_status>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800665c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10c      	bne.n	8006682 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <find_volume+0x82>
 800666e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800667a:	230a      	movs	r3, #10
 800667c:	e1ff      	b.n	8006a7e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800667e:	2300      	movs	r3, #0
 8006680:	e1fd      	b.n	8006a7e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe fd11 	bl	80050bc <disk_initialize>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80066a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80066ac:	2303      	movs	r3, #3
 80066ae:	e1e6      	b.n	8006a7e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <find_volume+0xca>
 80066b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80066c2:	230a      	movs	r3, #10
 80066c4:	e1db      	b.n	8006a7e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80066ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066ce:	f7ff ff3f 	bl	8006550 <check_fs>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80066d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d149      	bne.n	8006774 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80066e0:	2300      	movs	r3, #0
 80066e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80066e4:	e01e      	b.n	8006724 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80066e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80066f4:	4413      	add	r3, r2
 80066f6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	3304      	adds	r3, #4
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d006      	beq.n	8006710 <find_volume+0x114>
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	3308      	adds	r3, #8
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fd76 	bl	80051f8 <ld_dword>
 800670c:	4602      	mov	r2, r0
 800670e:	e000      	b.n	8006712 <find_volume+0x116>
 8006710:	2200      	movs	r2, #0
 8006712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	3358      	adds	r3, #88	@ 0x58
 8006718:	443b      	add	r3, r7
 800671a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800671e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006720:	3301      	adds	r3, #1
 8006722:	643b      	str	r3, [r7, #64]	@ 0x40
 8006724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006726:	2b03      	cmp	r3, #3
 8006728:	d9dd      	bls.n	80066e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800672a:	2300      	movs	r3, #0
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800672e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <find_volume+0x13e>
 8006734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006736:	3b01      	subs	r3, #1
 8006738:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800673a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	3358      	adds	r3, #88	@ 0x58
 8006740:	443b      	add	r3, r7
 8006742:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006746:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <find_volume+0x15e>
 800674e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006750:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006752:	f7ff fefd 	bl	8006550 <check_fs>
 8006756:	4603      	mov	r3, r0
 8006758:	e000      	b.n	800675c <find_volume+0x160>
 800675a:	2303      	movs	r3, #3
 800675c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006764:	2b01      	cmp	r3, #1
 8006766:	d905      	bls.n	8006774 <find_volume+0x178>
 8006768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800676a:	3301      	adds	r3, #1
 800676c:	643b      	str	r3, [r7, #64]	@ 0x40
 800676e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006770:	2b03      	cmp	r3, #3
 8006772:	d9e2      	bls.n	800673a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006778:	2b04      	cmp	r3, #4
 800677a:	d101      	bne.n	8006780 <find_volume+0x184>
 800677c:	2301      	movs	r3, #1
 800677e:	e17e      	b.n	8006a7e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006780:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006784:	2b01      	cmp	r3, #1
 8006786:	d901      	bls.n	800678c <find_volume+0x190>
 8006788:	230d      	movs	r3, #13
 800678a:	e178      	b.n	8006a7e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800678c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678e:	3330      	adds	r3, #48	@ 0x30
 8006790:	330b      	adds	r3, #11
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fd18 	bl	80051c8 <ld_word>
 8006798:	4603      	mov	r3, r0
 800679a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679e:	d001      	beq.n	80067a4 <find_volume+0x1a8>
 80067a0:	230d      	movs	r3, #13
 80067a2:	e16c      	b.n	8006a7e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80067a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a6:	3330      	adds	r3, #48	@ 0x30
 80067a8:	3316      	adds	r3, #22
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fd0c 	bl	80051c8 <ld_word>
 80067b0:	4603      	mov	r3, r0
 80067b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80067b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <find_volume+0x1cc>
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	3330      	adds	r3, #48	@ 0x30
 80067be:	3324      	adds	r3, #36	@ 0x24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe fd19 	bl	80051f8 <ld_dword>
 80067c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80067c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067cc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80067ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80067d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	789b      	ldrb	r3, [r3, #2]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d005      	beq.n	80067ec <find_volume+0x1f0>
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	789b      	ldrb	r3, [r3, #2]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d001      	beq.n	80067ec <find_volume+0x1f0>
 80067e8:	230d      	movs	r3, #13
 80067ea:	e148      	b.n	8006a7e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	789b      	ldrb	r3, [r3, #2]
 80067f0:	461a      	mov	r2, r3
 80067f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f4:	fb02 f303 	mul.w	r3, r2, r3
 80067f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006800:	461a      	mov	r2, r3
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006808:	895b      	ldrh	r3, [r3, #10]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <find_volume+0x224>
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	895b      	ldrh	r3, [r3, #10]
 8006812:	461a      	mov	r2, r3
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	895b      	ldrh	r3, [r3, #10]
 8006818:	3b01      	subs	r3, #1
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <find_volume+0x228>
 8006820:	230d      	movs	r3, #13
 8006822:	e12c      	b.n	8006a7e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006826:	3330      	adds	r3, #48	@ 0x30
 8006828:	3311      	adds	r3, #17
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fccc 	bl	80051c8 <ld_word>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	891b      	ldrh	r3, [r3, #8]
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <find_volume+0x24e>
 8006846:	230d      	movs	r3, #13
 8006848:	e119      	b.n	8006a7e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	3330      	adds	r3, #48	@ 0x30
 800684e:	3313      	adds	r3, #19
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe fcb9 	bl	80051c8 <ld_word>
 8006856:	4603      	mov	r3, r0
 8006858:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800685a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <find_volume+0x272>
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	3330      	adds	r3, #48	@ 0x30
 8006864:	3320      	adds	r3, #32
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fcc6 	bl	80051f8 <ld_dword>
 800686c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800686e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006870:	3330      	adds	r3, #48	@ 0x30
 8006872:	330e      	adds	r3, #14
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fca7 	bl	80051c8 <ld_word>
 800687a:	4603      	mov	r3, r0
 800687c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800687e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <find_volume+0x28c>
 8006884:	230d      	movs	r3, #13
 8006886:	e0fa      	b.n	8006a7e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006888:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800688a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800688c:	4413      	add	r3, r2
 800688e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006890:	8912      	ldrh	r2, [r2, #8]
 8006892:	0912      	lsrs	r2, r2, #4
 8006894:	b292      	uxth	r2, r2
 8006896:	4413      	add	r3, r2
 8006898:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800689a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	429a      	cmp	r2, r3
 80068a0:	d204      	bcs.n	80068ac <find_volume+0x2b0>
 80068a2:	230d      	movs	r3, #13
 80068a4:	e0eb      	b.n	8006a7e <find_volume+0x482>
 80068a6:	bf00      	nop
 80068a8:	200007e4 	.word	0x200007e4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80068ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068b4:	8952      	ldrh	r2, [r2, #10]
 80068b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <find_volume+0x2ca>
 80068c2:	230d      	movs	r3, #13
 80068c4:	e0db      	b.n	8006a7e <find_volume+0x482>
		fmt = FS_FAT32;
 80068c6:	2303      	movs	r3, #3
 80068c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d802      	bhi.n	80068dc <find_volume+0x2e0>
 80068d6:	2302      	movs	r3, #2
 80068d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d802      	bhi.n	80068ec <find_volume+0x2f0>
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1c9a      	adds	r2, r3, #2
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80068f8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80068fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80068fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068fe:	441a      	add	r2, r3
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006904:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	441a      	add	r2, r3
 800690a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800690e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006912:	2b03      	cmp	r3, #3
 8006914:	d11e      	bne.n	8006954 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006918:	3330      	adds	r3, #48	@ 0x30
 800691a:	332a      	adds	r3, #42	@ 0x2a
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fc53 	bl	80051c8 <ld_word>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <find_volume+0x330>
 8006928:	230d      	movs	r3, #13
 800692a:	e0a8      	b.n	8006a7e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	891b      	ldrh	r3, [r3, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <find_volume+0x33c>
 8006934:	230d      	movs	r3, #13
 8006936:	e0a2      	b.n	8006a7e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	3330      	adds	r3, #48	@ 0x30
 800693c:	332c      	adds	r3, #44	@ 0x2c
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fc5a 	bl	80051f8 <ld_dword>
 8006944:	4602      	mov	r2, r0
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800694a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	647b      	str	r3, [r7, #68]	@ 0x44
 8006952:	e01f      	b.n	8006994 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	891b      	ldrh	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <find_volume+0x364>
 800695c:	230d      	movs	r3, #13
 800695e:	e08e      	b.n	8006a7e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006966:	441a      	add	r2, r3
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800696c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006970:	2b02      	cmp	r3, #2
 8006972:	d103      	bne.n	800697c <find_volume+0x380>
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	e00a      	b.n	8006992 <find_volume+0x396>
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	695a      	ldr	r2, [r3, #20]
 8006980:	4613      	mov	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	4413      	add	r3, r2
 8006986:	085a      	lsrs	r2, r3, #1
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006992:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	699a      	ldr	r2, [r3, #24]
 8006998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800699a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800699e:	0a5b      	lsrs	r3, r3, #9
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d201      	bcs.n	80069a8 <find_volume+0x3ac>
 80069a4:	230d      	movs	r3, #13
 80069a6:	e06a      	b.n	8006a7e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	f04f 32ff 	mov.w	r2, #4294967295
 80069ae:	611a      	str	r2, [r3, #16]
 80069b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	2280      	movs	r2, #128	@ 0x80
 80069bc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80069be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d149      	bne.n	8006a5a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	3330      	adds	r3, #48	@ 0x30
 80069ca:	3330      	adds	r3, #48	@ 0x30
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fbfb 	bl	80051c8 <ld_word>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d140      	bne.n	8006a5a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80069d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069da:	3301      	adds	r3, #1
 80069dc:	4619      	mov	r1, r3
 80069de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80069e0:	f7fe fea2 	bl	8005728 <move_window>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d137      	bne.n	8006a5a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	2200      	movs	r2, #0
 80069ee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	3330      	adds	r3, #48	@ 0x30
 80069f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe fbe5 	bl	80051c8 <ld_word>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d127      	bne.n	8006a5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	3330      	adds	r3, #48	@ 0x30
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fbf2 	bl	80051f8 <ld_dword>
 8006a14:	4603      	mov	r3, r0
 8006a16:	4a1c      	ldr	r2, [pc, #112]	@ (8006a88 <find_volume+0x48c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d11e      	bne.n	8006a5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	3330      	adds	r3, #48	@ 0x30
 8006a20:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fbe7 	bl	80051f8 <ld_dword>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4a17      	ldr	r2, [pc, #92]	@ (8006a8c <find_volume+0x490>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d113      	bne.n	8006a5a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a34:	3330      	adds	r3, #48	@ 0x30
 8006a36:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe fbdc 	bl	80051f8 <ld_dword>
 8006a40:	4602      	mov	r2, r0
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	3330      	adds	r3, #48	@ 0x30
 8006a4a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fbd2 	bl	80051f8 <ld_dword>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006a60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006a62:	4b0b      	ldr	r3, [pc, #44]	@ (8006a90 <find_volume+0x494>)
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	3301      	adds	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <find_volume+0x494>)
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	4b08      	ldr	r3, [pc, #32]	@ (8006a90 <find_volume+0x494>)
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006a76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a78:	f7fe fdee 	bl	8005658 <clear_lock>
#endif
	return FR_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3758      	adds	r7, #88	@ 0x58
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	41615252 	.word	0x41615252
 8006a8c:	61417272 	.word	0x61417272
 8006a90:	200007e8 	.word	0x200007e8

08006a94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006a9e:	2309      	movs	r3, #9
 8006aa0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01c      	beq.n	8006ae2 <validate+0x4e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d018      	beq.n	8006ae2 <validate+0x4e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d013      	beq.n	8006ae2 <validate+0x4e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	889a      	ldrh	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	88db      	ldrh	r3, [r3, #6]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d10c      	bne.n	8006ae2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fada 	bl	8005088 <disk_status>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <validate+0x4e>
			res = FR_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <validate+0x5a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	e000      	b.n	8006af0 <validate+0x5c>
 8006aee:	2300      	movs	r3, #0
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	6013      	str	r3, [r2, #0]
	return res;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b12:	f107 0310 	add.w	r3, r7, #16
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fcd5 	bl	80064c6 <get_ldnumber>
 8006b1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da01      	bge.n	8006b28 <f_mount+0x28>
 8006b24:	230b      	movs	r3, #11
 8006b26:	e02b      	b.n	8006b80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006b28:	4a17      	ldr	r2, [pc, #92]	@ (8006b88 <f_mount+0x88>)
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006b38:	69b8      	ldr	r0, [r7, #24]
 8006b3a:	f7fe fd8d 	bl	8005658 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	490d      	ldr	r1, [pc, #52]	@ (8006b88 <f_mount+0x88>)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <f_mount+0x66>
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d001      	beq.n	8006b6a <f_mount+0x6a>
 8006b66:	2300      	movs	r3, #0
 8006b68:	e00a      	b.n	8006b80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006b6a:	f107 010c 	add.w	r1, r7, #12
 8006b6e:	f107 0308 	add.w	r3, r7, #8
 8006b72:	2200      	movs	r2, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fd41 	bl	80065fc <find_volume>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	200007e4 	.word	0x200007e4

08006b8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b098      	sub	sp, #96	@ 0x60
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <f_open+0x18>
 8006ba0:	2309      	movs	r3, #9
 8006ba2:	e1a9      	b.n	8006ef8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006baa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006bac:	79fa      	ldrb	r2, [r7, #7]
 8006bae:	f107 0110 	add.w	r1, r7, #16
 8006bb2:	f107 0308 	add.w	r3, r7, #8
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff fd20 	bl	80065fc <find_volume>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 818d 	bne.w	8006ee6 <f_open+0x35a>
		dj.obj.fs = fs;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	f107 0314 	add.w	r3, r7, #20
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fc03 	bl	80063e4 <follow_path>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006be4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d118      	bne.n	8006c1e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006bec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bf0:	b25b      	sxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da03      	bge.n	8006bfe <f_open+0x72>
				res = FR_INVALID_NAME;
 8006bf6:	2306      	movs	r3, #6
 8006bf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006bfc:	e00f      	b.n	8006c1e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	bf8c      	ite	hi
 8006c04:	2301      	movhi	r3, #1
 8006c06:	2300      	movls	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f107 0314 	add.w	r3, r7, #20
 8006c10:	4611      	mov	r1, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fbd8 	bl	80053c8 <chk_lock>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	f003 031c 	and.w	r3, r3, #28
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d07f      	beq.n	8006d28 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006c28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d017      	beq.n	8006c60 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006c30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d10e      	bne.n	8006c56 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006c38:	f7fe fc22 	bl	8005480 <enq_lock>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d006      	beq.n	8006c50 <f_open+0xc4>
 8006c42:	f107 0314 	add.w	r3, r7, #20
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fb06 	bl	8006258 <dir_register>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	e000      	b.n	8006c52 <f_open+0xc6>
 8006c50:	2312      	movs	r3, #18
 8006c52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	71fb      	strb	r3, [r7, #7]
 8006c5e:	e010      	b.n	8006c82 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006c60:	7ebb      	ldrb	r3, [r7, #26]
 8006c62:	f003 0311 	and.w	r3, r3, #17
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <f_open+0xe6>
					res = FR_DENIED;
 8006c6a:	2307      	movs	r3, #7
 8006c6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006c70:	e007      	b.n	8006c82 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <f_open+0xf6>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006c82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d168      	bne.n	8006d5c <f_open+0x1d0>
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d063      	beq.n	8006d5c <f_open+0x1d0>
				dw = GET_FATTIME();
 8006c94:	f7fd ffc4 	bl	8004c20 <get_fattime>
 8006c98:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9c:	330e      	adds	r3, #14
 8006c9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fae7 	bl	8005274 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca8:	3316      	adds	r3, #22
 8006caa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fae1 	bl	8005274 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb4:	330b      	adds	r3, #11
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff fa35 	bl	8006130 <ld_clust>
 8006cc6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fa4d 	bl	800616e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd6:	331c      	adds	r3, #28
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe faca 	bl	8005274 <st_dword>
					fs->wflag = 1;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d037      	beq.n	8006d5c <f_open+0x1d0>
						dw = fs->winsect;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006cf2:	f107 0314 	add.w	r3, r7, #20
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe ff60 	bl	8005bc0 <remove_chain>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d126      	bne.n	8006d5c <f_open+0x1d0>
							res = move_window(fs, dw);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fd08 	bl	8005728 <move_window>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d22:	3a01      	subs	r2, #1
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	e019      	b.n	8006d5c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006d28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d115      	bne.n	8006d5c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006d30:	7ebb      	ldrb	r3, [r7, #26]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006d40:	e00c      	b.n	8006d5c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <f_open+0x1d0>
 8006d4c:	7ebb      	ldrb	r3, [r7, #26]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <f_open+0x1d0>
						res = FR_DENIED;
 8006d56:	2307      	movs	r3, #7
 8006d58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d126      	bne.n	8006db2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006d7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	bf8c      	ite	hi
 8006d8a:	2301      	movhi	r3, #1
 8006d8c:	2300      	movls	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	f107 0314 	add.w	r3, r7, #20
 8006d96:	4611      	mov	r1, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fb93 	bl	80054c4 <inc_lock>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <f_open+0x226>
 8006dac:	2302      	movs	r3, #2
 8006dae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006db2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f040 8095 	bne.w	8006ee6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff f9b4 	bl	8006130 <ld_clust>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd0:	331c      	adds	r3, #28
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe fa10 	bl	80051f8 <ld_dword>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	88da      	ldrh	r2, [r3, #6]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	79fa      	ldrb	r2, [r7, #7]
 8006df6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3330      	adds	r3, #48	@ 0x30
 8006e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e12:	2100      	movs	r1, #0
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fa7a 	bl	800530e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d060      	beq.n	8006ee6 <f_open+0x35a>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d05c      	beq.n	8006ee6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	895b      	ldrh	r3, [r3, #10]
 8006e38:	025b      	lsls	r3, r3, #9
 8006e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e48:	e016      	b.n	8006e78 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fd25 	bl	800589e <get_fat>
 8006e54:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006e56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d802      	bhi.n	8006e62 <f_open+0x2d6>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d102      	bne.n	8006e70 <f_open+0x2e4>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <f_open+0x2fc>
 8006e80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d8e0      	bhi.n	8006e4a <f_open+0x2be>
				}
				fp->clust = clst;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e8c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d127      	bne.n	8006ee6 <f_open+0x35a>
 8006e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d022      	beq.n	8006ee6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe fcdb 	bl	8005860 <clust2sect>
 8006eaa:	6478      	str	r0, [r7, #68]	@ 0x44
 8006eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <f_open+0x32e>
						res = FR_INT_ERR;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006eb8:	e015      	b.n	8006ee6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ebc:	0a5a      	lsrs	r2, r3, #9
 8006ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec0:	441a      	add	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	7858      	ldrb	r0, [r3, #1]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a1a      	ldr	r2, [r3, #32]
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f7fe f919 	bl	800510c <disk_read>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <f_open+0x35a>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <f_open+0x368>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3760      	adds	r7, #96	@ 0x60
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08e      	sub	sp, #56	@ 0x38
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f107 0214 	add.w	r2, r7, #20
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fdb7 	bl	8006a94 <validate>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d107      	bne.n	8006f44 <f_read+0x44>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	7d5b      	ldrb	r3, [r3, #21]
 8006f38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <f_read+0x4a>
 8006f44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f48:	e115      	b.n	8007176 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	7d1b      	ldrb	r3, [r3, #20]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <f_read+0x5a>
 8006f56:	2307      	movs	r3, #7
 8006f58:	e10d      	b.n	8007176 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	f240 80fe 	bls.w	800716c <f_read+0x26c>
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006f74:	e0fa      	b.n	800716c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f040 80c6 	bne.w	8007110 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	0a5b      	lsrs	r3, r3, #9
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	8952      	ldrh	r2, [r2, #10]
 8006f8e:	3a01      	subs	r2, #1
 8006f90:	4013      	ands	r3, r2
 8006f92:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d12f      	bne.n	8006ffa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fa8:	e013      	b.n	8006fd2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7fe fefe 	bl	8005dba <clmt_clust>
 8006fbe:	6338      	str	r0, [r7, #48]	@ 0x30
 8006fc0:	e007      	b.n	8006fd2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7fe fc67 	bl	800589e <get_fat>
 8006fd0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d804      	bhi.n	8006fe2 <f_read+0xe2>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	755a      	strb	r2, [r3, #21]
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e0c9      	b.n	8007176 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d104      	bne.n	8006ff4 <f_read+0xf4>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	755a      	strb	r2, [r3, #21]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0c0      	b.n	8007176 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ff8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7fe fc2c 	bl	8005860 <clust2sect>
 8007008:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <f_read+0x11a>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2202      	movs	r2, #2
 8007014:	755a      	strb	r2, [r3, #21]
 8007016:	2302      	movs	r3, #2
 8007018:	e0ad      	b.n	8007176 <f_read+0x276>
			sect += csect;
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	0a5b      	lsrs	r3, r3, #9
 8007026:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	2b00      	cmp	r3, #0
 800702c:	d039      	beq.n	80070a2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	4413      	add	r3, r2
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	8952      	ldrh	r2, [r2, #10]
 8007038:	4293      	cmp	r3, r2
 800703a:	d905      	bls.n	8007048 <f_read+0x148>
					cc = fs->csize - csect;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	895b      	ldrh	r3, [r3, #10]
 8007040:	461a      	mov	r2, r3
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	7858      	ldrb	r0, [r3, #1]
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007052:	f7fe f85b 	bl	800510c <disk_read>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <f_read+0x166>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	755a      	strb	r2, [r3, #21]
 8007062:	2301      	movs	r3, #1
 8007064:	e087      	b.n	8007176 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	7d1b      	ldrb	r3, [r3, #20]
 800706a:	b25b      	sxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	da14      	bge.n	800709a <f_read+0x19a>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a1a      	ldr	r2, [r3, #32]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800707a:	429a      	cmp	r2, r3
 800707c:	d90d      	bls.n	800709a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1a      	ldr	r2, [r3, #32]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	025b      	lsls	r3, r3, #9
 8007088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800708a:	18d0      	adds	r0, r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3330      	adds	r3, #48	@ 0x30
 8007090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007094:	4619      	mov	r1, r3
 8007096:	f7fe f919 	bl	80052cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	025b      	lsls	r3, r3, #9
 800709e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80070a0:	e050      	b.n	8007144 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d02e      	beq.n	800710a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	7d1b      	ldrb	r3, [r3, #20]
 80070b0:	b25b      	sxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	da18      	bge.n	80070e8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	7858      	ldrb	r0, [r3, #1]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1a      	ldr	r2, [r3, #32]
 80070c4:	2301      	movs	r3, #1
 80070c6:	f7fe f841 	bl	800514c <disk_write>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d004      	beq.n	80070da <f_read+0x1da>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	755a      	strb	r2, [r3, #21]
 80070d6:	2301      	movs	r3, #1
 80070d8:	e04d      	b.n	8007176 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	7d1b      	ldrb	r3, [r3, #20]
 80070de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	7858      	ldrb	r0, [r3, #1]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070f2:	2301      	movs	r3, #1
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	f7fe f809 	bl	800510c <disk_read>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <f_read+0x20a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	755a      	strb	r2, [r3, #21]
 8007106:	2301      	movs	r3, #1
 8007108:	e035      	b.n	8007176 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007118:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800711c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800711e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	429a      	cmp	r2, r3
 8007124:	d901      	bls.n	800712a <f_read+0x22a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007138:	4413      	add	r3, r2
 800713a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800713c:	4619      	mov	r1, r3
 800713e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007140:	f7fe f8c4 	bl	80052cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	4413      	add	r3, r2
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	441a      	add	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	619a      	str	r2, [r3, #24]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	441a      	add	r2, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f47f af01 	bne.w	8006f76 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3738      	adds	r7, #56	@ 0x38
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b08c      	sub	sp, #48	@ 0x30
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f107 0210 	add.w	r2, r7, #16
 800719c:	4611      	mov	r1, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fc78 	bl	8006a94 <validate>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80071aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <f_write+0x44>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	7d5b      	ldrb	r3, [r3, #21]
 80071b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80071ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <f_write+0x4a>
 80071c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071c6:	e14b      	b.n	8007460 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	7d1b      	ldrb	r3, [r3, #20]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <f_write+0x5a>
 80071d4:	2307      	movs	r3, #7
 80071d6:	e143      	b.n	8007460 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	441a      	add	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	f080 812d 	bcs.w	8007444 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	43db      	mvns	r3, r3
 80071f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80071f2:	e127      	b.n	8007444 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 80e3 	bne.w	80073c8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	0a5b      	lsrs	r3, r3, #9
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	8952      	ldrh	r2, [r2, #10]
 800720c:	3a01      	subs	r2, #1
 800720e:	4013      	ands	r3, r2
 8007210:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d143      	bne.n	80072a0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10c      	bne.n	800723a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	d11a      	bne.n	8007262 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fd2a 	bl	8005c8a <create_chain>
 8007236:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007238:	e013      	b.n	8007262 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d007      	beq.n	8007252 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	4619      	mov	r1, r3
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7fe fdb6 	bl	8005dba <clmt_clust>
 800724e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007250:	e007      	b.n	8007262 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	4619      	mov	r1, r3
 800725a:	4610      	mov	r0, r2
 800725c:	f7fe fd15 	bl	8005c8a <create_chain>
 8007260:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80f2 	beq.w	800744e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726c:	2b01      	cmp	r3, #1
 800726e:	d104      	bne.n	800727a <f_write+0xfc>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2202      	movs	r2, #2
 8007274:	755a      	strb	r2, [r3, #21]
 8007276:	2302      	movs	r3, #2
 8007278:	e0f2      	b.n	8007460 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d104      	bne.n	800728c <f_write+0x10e>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	755a      	strb	r2, [r3, #21]
 8007288:	2301      	movs	r3, #1
 800728a:	e0e9      	b.n	8007460 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007290:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <f_write+0x122>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800729e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	7d1b      	ldrb	r3, [r3, #20]
 80072a4:	b25b      	sxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da18      	bge.n	80072dc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	7858      	ldrb	r0, [r3, #1]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a1a      	ldr	r2, [r3, #32]
 80072b8:	2301      	movs	r3, #1
 80072ba:	f7fd ff47 	bl	800514c <disk_write>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <f_write+0x150>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	755a      	strb	r2, [r3, #21]
 80072ca:	2301      	movs	r3, #1
 80072cc:	e0c8      	b.n	8007460 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	7d1b      	ldrb	r3, [r3, #20]
 80072d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7fe fabb 	bl	8005860 <clust2sect>
 80072ea:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <f_write+0x17e>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2202      	movs	r2, #2
 80072f6:	755a      	strb	r2, [r3, #21]
 80072f8:	2302      	movs	r3, #2
 80072fa:	e0b1      	b.n	8007460 <f_write+0x2e2>
			sect += csect;
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	4413      	add	r3, r2
 8007302:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	0a5b      	lsrs	r3, r3, #9
 8007308:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d03c      	beq.n	800738a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	4413      	add	r3, r2
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	8952      	ldrh	r2, [r2, #10]
 800731a:	4293      	cmp	r3, r2
 800731c:	d905      	bls.n	800732a <f_write+0x1ac>
					cc = fs->csize - csect;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	895b      	ldrh	r3, [r3, #10]
 8007322:	461a      	mov	r2, r3
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	7858      	ldrb	r0, [r3, #1]
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	69f9      	ldr	r1, [r7, #28]
 8007334:	f7fd ff0a 	bl	800514c <disk_write>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <f_write+0x1ca>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	755a      	strb	r2, [r3, #21]
 8007344:	2301      	movs	r3, #1
 8007346:	e08b      	b.n	8007460 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	429a      	cmp	r2, r3
 8007354:	d915      	bls.n	8007382 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	025b      	lsls	r3, r3, #9
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800736e:	4619      	mov	r1, r3
 8007370:	f7fd ffac 	bl	80052cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	7d1b      	ldrb	r3, [r3, #20]
 8007378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737c:	b2da      	uxtb	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	025b      	lsls	r3, r3, #9
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007388:	e03f      	b.n	800740a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	429a      	cmp	r2, r3
 8007392:	d016      	beq.n	80073c2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800739c:	429a      	cmp	r2, r3
 800739e:	d210      	bcs.n	80073c2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	7858      	ldrb	r0, [r3, #1]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073aa:	2301      	movs	r3, #1
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	f7fd fead 	bl	800510c <disk_read>
 80073b2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	755a      	strb	r2, [r3, #21]
 80073be:	2301      	movs	r3, #1
 80073c0:	e04e      	b.n	8007460 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80073d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d901      	bls.n	80073e2 <f_write+0x264>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f0:	4413      	add	r3, r2
 80073f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f4:	69f9      	ldr	r1, [r7, #28]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fd ff68 	bl	80052cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	7d1b      	ldrb	r3, [r3, #20]
 8007400:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007404:	b2da      	uxtb	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	4413      	add	r3, r2
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	441a      	add	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	619a      	str	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	429a      	cmp	r2, r3
 8007428:	bf38      	it	cc
 800742a:	461a      	movcc	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	60da      	str	r2, [r3, #12]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	441a      	add	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f47f aed4 	bne.w	80071f4 <f_write+0x76>
 800744c:	e000      	b.n	8007450 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800744e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	7d1b      	ldrb	r3, [r3, #20]
 8007454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3730      	adds	r7, #48	@ 0x30
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f107 0208 	add.w	r2, r7, #8
 8007476:	4611      	mov	r1, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fb0b 	bl	8006a94 <validate>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d168      	bne.n	800755a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7d1b      	ldrb	r3, [r3, #20]
 800748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d062      	beq.n	800755a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7d1b      	ldrb	r3, [r3, #20]
 8007498:	b25b      	sxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	da15      	bge.n	80074ca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	7858      	ldrb	r0, [r3, #1]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1a      	ldr	r2, [r3, #32]
 80074ac:	2301      	movs	r3, #1
 80074ae:	f7fd fe4d 	bl	800514c <disk_write>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <f_sync+0x54>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e04f      	b.n	800755c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7d1b      	ldrb	r3, [r3, #20]
 80074c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80074ca:	f7fd fba9 	bl	8004c20 <get_fattime>
 80074ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7fe f925 	bl	8005728 <move_window>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d138      	bne.n	800755a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	330b      	adds	r3, #11
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	330b      	adds	r3, #11
 80074f8:	f042 0220 	orr.w	r2, r2, #32
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	461a      	mov	r2, r3
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	f7fe fe2f 	bl	800616e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f103 021c 	add.w	r2, r3, #28
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f7fd fea9 	bl	8005274 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3316      	adds	r3, #22
 8007526:	6939      	ldr	r1, [r7, #16]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fd fea3 	bl	8005274 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3312      	adds	r3, #18
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f7fd fe82 	bl	800523e <st_word>
					fs->wflag = 1;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2201      	movs	r2, #1
 800753e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe f91e 	bl	8005784 <sync_fs>
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7d1b      	ldrb	r3, [r3, #20]
 8007550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007554:	b2da      	uxtb	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800755a:	7dfb      	ldrb	r3, [r7, #23]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff7b 	bl	8007468 <f_sync>
 8007572:	4603      	mov	r3, r0
 8007574:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d118      	bne.n	80075ae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f107 0208 	add.w	r2, r7, #8
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fa85 	bl	8006a94 <validate>
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10c      	bne.n	80075ae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe f821 	bl	80055e0 <dec_lock>
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d102      	bne.n	80075ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075c6:	2301      	movs	r3, #1
 80075c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075ce:	4b1f      	ldr	r3, [pc, #124]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 80075d0:	7a5b      	ldrb	r3, [r3, #9]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d131      	bne.n	800763c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075d8:	4b1c      	ldr	r3, [pc, #112]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 80075da:	7a5b      	ldrb	r3, [r3, #9]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	461a      	mov	r2, r3
 80075e0:	4b1a      	ldr	r3, [pc, #104]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 80075e2:	2100      	movs	r1, #0
 80075e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075e6:	4b19      	ldr	r3, [pc, #100]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 80075e8:	7a5b      	ldrb	r3, [r3, #9]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	4a17      	ldr	r2, [pc, #92]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80075f6:	4b15      	ldr	r3, [pc, #84]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 80075f8:	7a5b      	ldrb	r3, [r3, #9]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	4b13      	ldr	r3, [pc, #76]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 8007600:	4413      	add	r3, r2
 8007602:	79fa      	ldrb	r2, [r7, #7]
 8007604:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007606:	4b11      	ldr	r3, [pc, #68]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 8007608:	7a5b      	ldrb	r3, [r3, #9]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	b2d1      	uxtb	r1, r2
 8007610:	4a0e      	ldr	r2, [pc, #56]	@ (800764c <FATFS_LinkDriverEx+0x94>)
 8007612:	7251      	strb	r1, [r2, #9]
 8007614:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007616:	7dbb      	ldrb	r3, [r7, #22]
 8007618:	3330      	adds	r3, #48	@ 0x30
 800761a:	b2da      	uxtb	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3301      	adds	r3, #1
 8007624:	223a      	movs	r2, #58	@ 0x3a
 8007626:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	3302      	adds	r3, #2
 800762c:	222f      	movs	r2, #47	@ 0x2f
 800762e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3303      	adds	r3, #3
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
}
 800763e:	4618      	mov	r0, r3
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	2000080c 	.word	0x2000080c

08007650 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800765a:	2200      	movs	r2, #0
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff ffaa 	bl	80075b8 <FATFS_LinkDriverEx>
 8007664:	4603      	mov	r3, r0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <siprintf>:
 8007670:	b40e      	push	{r1, r2, r3}
 8007672:	b500      	push	{lr}
 8007674:	b09c      	sub	sp, #112	@ 0x70
 8007676:	ab1d      	add	r3, sp, #116	@ 0x74
 8007678:	9002      	str	r0, [sp, #8]
 800767a:	9006      	str	r0, [sp, #24]
 800767c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007680:	4809      	ldr	r0, [pc, #36]	@ (80076a8 <siprintf+0x38>)
 8007682:	9107      	str	r1, [sp, #28]
 8007684:	9104      	str	r1, [sp, #16]
 8007686:	4909      	ldr	r1, [pc, #36]	@ (80076ac <siprintf+0x3c>)
 8007688:	f853 2b04 	ldr.w	r2, [r3], #4
 800768c:	9105      	str	r1, [sp, #20]
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	a902      	add	r1, sp, #8
 8007694:	f000 f994 	bl	80079c0 <_svfiprintf_r>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	b01c      	add	sp, #112	@ 0x70
 80076a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a4:	b003      	add	sp, #12
 80076a6:	4770      	bx	lr
 80076a8:	2000001c 	.word	0x2000001c
 80076ac:	ffff0208 	.word	0xffff0208

080076b0 <memset>:
 80076b0:	4402      	add	r2, r0
 80076b2:	4603      	mov	r3, r0
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d100      	bne.n	80076ba <memset+0xa>
 80076b8:	4770      	bx	lr
 80076ba:	f803 1b01 	strb.w	r1, [r3], #1
 80076be:	e7f9      	b.n	80076b4 <memset+0x4>

080076c0 <__errno>:
 80076c0:	4b01      	ldr	r3, [pc, #4]	@ (80076c8 <__errno+0x8>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	2000001c 	.word	0x2000001c

080076cc <__libc_init_array>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007704 <__libc_init_array+0x38>)
 80076d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007708 <__libc_init_array+0x3c>)
 80076d2:	1b64      	subs	r4, r4, r5
 80076d4:	10a4      	asrs	r4, r4, #2
 80076d6:	2600      	movs	r6, #0
 80076d8:	42a6      	cmp	r6, r4
 80076da:	d109      	bne.n	80076f0 <__libc_init_array+0x24>
 80076dc:	4d0b      	ldr	r5, [pc, #44]	@ (800770c <__libc_init_array+0x40>)
 80076de:	4c0c      	ldr	r4, [pc, #48]	@ (8007710 <__libc_init_array+0x44>)
 80076e0:	f000 fc66 	bl	8007fb0 <_init>
 80076e4:	1b64      	subs	r4, r4, r5
 80076e6:	10a4      	asrs	r4, r4, #2
 80076e8:	2600      	movs	r6, #0
 80076ea:	42a6      	cmp	r6, r4
 80076ec:	d105      	bne.n	80076fa <__libc_init_array+0x2e>
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f4:	4798      	blx	r3
 80076f6:	3601      	adds	r6, #1
 80076f8:	e7ee      	b.n	80076d8 <__libc_init_array+0xc>
 80076fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fe:	4798      	blx	r3
 8007700:	3601      	adds	r6, #1
 8007702:	e7f2      	b.n	80076ea <__libc_init_array+0x1e>
 8007704:	080081bc 	.word	0x080081bc
 8007708:	080081bc 	.word	0x080081bc
 800770c:	080081bc 	.word	0x080081bc
 8007710:	080081c0 	.word	0x080081c0

08007714 <__retarget_lock_acquire_recursive>:
 8007714:	4770      	bx	lr

08007716 <__retarget_lock_release_recursive>:
 8007716:	4770      	bx	lr

08007718 <_free_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4605      	mov	r5, r0
 800771c:	2900      	cmp	r1, #0
 800771e:	d041      	beq.n	80077a4 <_free_r+0x8c>
 8007720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007724:	1f0c      	subs	r4, r1, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfb8      	it	lt
 800772a:	18e4      	addlt	r4, r4, r3
 800772c:	f000 f8e0 	bl	80078f0 <__malloc_lock>
 8007730:	4a1d      	ldr	r2, [pc, #116]	@ (80077a8 <_free_r+0x90>)
 8007732:	6813      	ldr	r3, [r2, #0]
 8007734:	b933      	cbnz	r3, 8007744 <_free_r+0x2c>
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	6014      	str	r4, [r2, #0]
 800773a:	4628      	mov	r0, r5
 800773c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007740:	f000 b8dc 	b.w	80078fc <__malloc_unlock>
 8007744:	42a3      	cmp	r3, r4
 8007746:	d908      	bls.n	800775a <_free_r+0x42>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	1821      	adds	r1, r4, r0
 800774c:	428b      	cmp	r3, r1
 800774e:	bf01      	itttt	eq
 8007750:	6819      	ldreq	r1, [r3, #0]
 8007752:	685b      	ldreq	r3, [r3, #4]
 8007754:	1809      	addeq	r1, r1, r0
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	e7ed      	b.n	8007736 <_free_r+0x1e>
 800775a:	461a      	mov	r2, r3
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b10b      	cbz	r3, 8007764 <_free_r+0x4c>
 8007760:	42a3      	cmp	r3, r4
 8007762:	d9fa      	bls.n	800775a <_free_r+0x42>
 8007764:	6811      	ldr	r1, [r2, #0]
 8007766:	1850      	adds	r0, r2, r1
 8007768:	42a0      	cmp	r0, r4
 800776a:	d10b      	bne.n	8007784 <_free_r+0x6c>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	4401      	add	r1, r0
 8007770:	1850      	adds	r0, r2, r1
 8007772:	4283      	cmp	r3, r0
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	d1e0      	bne.n	800773a <_free_r+0x22>
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	6053      	str	r3, [r2, #4]
 800777e:	4408      	add	r0, r1
 8007780:	6010      	str	r0, [r2, #0]
 8007782:	e7da      	b.n	800773a <_free_r+0x22>
 8007784:	d902      	bls.n	800778c <_free_r+0x74>
 8007786:	230c      	movs	r3, #12
 8007788:	602b      	str	r3, [r5, #0]
 800778a:	e7d6      	b.n	800773a <_free_r+0x22>
 800778c:	6820      	ldr	r0, [r4, #0]
 800778e:	1821      	adds	r1, r4, r0
 8007790:	428b      	cmp	r3, r1
 8007792:	bf04      	itt	eq
 8007794:	6819      	ldreq	r1, [r3, #0]
 8007796:	685b      	ldreq	r3, [r3, #4]
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	bf04      	itt	eq
 800779c:	1809      	addeq	r1, r1, r0
 800779e:	6021      	streq	r1, [r4, #0]
 80077a0:	6054      	str	r4, [r2, #4]
 80077a2:	e7ca      	b.n	800773a <_free_r+0x22>
 80077a4:	bd38      	pop	{r3, r4, r5, pc}
 80077a6:	bf00      	nop
 80077a8:	2000095c 	.word	0x2000095c

080077ac <sbrk_aligned>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4e0f      	ldr	r6, [pc, #60]	@ (80077ec <sbrk_aligned+0x40>)
 80077b0:	460c      	mov	r4, r1
 80077b2:	6831      	ldr	r1, [r6, #0]
 80077b4:	4605      	mov	r5, r0
 80077b6:	b911      	cbnz	r1, 80077be <sbrk_aligned+0x12>
 80077b8:	f000 fba6 	bl	8007f08 <_sbrk_r>
 80077bc:	6030      	str	r0, [r6, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f000 fba1 	bl	8007f08 <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d103      	bne.n	80077d2 <sbrk_aligned+0x26>
 80077ca:	f04f 34ff 	mov.w	r4, #4294967295
 80077ce:	4620      	mov	r0, r4
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
 80077d2:	1cc4      	adds	r4, r0, #3
 80077d4:	f024 0403 	bic.w	r4, r4, #3
 80077d8:	42a0      	cmp	r0, r4
 80077da:	d0f8      	beq.n	80077ce <sbrk_aligned+0x22>
 80077dc:	1a21      	subs	r1, r4, r0
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 fb92 	bl	8007f08 <_sbrk_r>
 80077e4:	3001      	adds	r0, #1
 80077e6:	d1f2      	bne.n	80077ce <sbrk_aligned+0x22>
 80077e8:	e7ef      	b.n	80077ca <sbrk_aligned+0x1e>
 80077ea:	bf00      	nop
 80077ec:	20000958 	.word	0x20000958

080077f0 <_malloc_r>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	1ccd      	adds	r5, r1, #3
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	2d00      	cmp	r5, #0
 8007804:	4606      	mov	r6, r0
 8007806:	db01      	blt.n	800780c <_malloc_r+0x1c>
 8007808:	42a9      	cmp	r1, r5
 800780a:	d904      	bls.n	8007816 <_malloc_r+0x26>
 800780c:	230c      	movs	r3, #12
 800780e:	6033      	str	r3, [r6, #0]
 8007810:	2000      	movs	r0, #0
 8007812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078ec <_malloc_r+0xfc>
 800781a:	f000 f869 	bl	80078f0 <__malloc_lock>
 800781e:	f8d8 3000 	ldr.w	r3, [r8]
 8007822:	461c      	mov	r4, r3
 8007824:	bb44      	cbnz	r4, 8007878 <_malloc_r+0x88>
 8007826:	4629      	mov	r1, r5
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff ffbf 	bl	80077ac <sbrk_aligned>
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	4604      	mov	r4, r0
 8007832:	d158      	bne.n	80078e6 <_malloc_r+0xf6>
 8007834:	f8d8 4000 	ldr.w	r4, [r8]
 8007838:	4627      	mov	r7, r4
 800783a:	2f00      	cmp	r7, #0
 800783c:	d143      	bne.n	80078c6 <_malloc_r+0xd6>
 800783e:	2c00      	cmp	r4, #0
 8007840:	d04b      	beq.n	80078da <_malloc_r+0xea>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	4639      	mov	r1, r7
 8007846:	4630      	mov	r0, r6
 8007848:	eb04 0903 	add.w	r9, r4, r3
 800784c:	f000 fb5c 	bl	8007f08 <_sbrk_r>
 8007850:	4581      	cmp	r9, r0
 8007852:	d142      	bne.n	80078da <_malloc_r+0xea>
 8007854:	6821      	ldr	r1, [r4, #0]
 8007856:	1a6d      	subs	r5, r5, r1
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ffa6 	bl	80077ac <sbrk_aligned>
 8007860:	3001      	adds	r0, #1
 8007862:	d03a      	beq.n	80078da <_malloc_r+0xea>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	442b      	add	r3, r5
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	f8d8 3000 	ldr.w	r3, [r8]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	bb62      	cbnz	r2, 80078cc <_malloc_r+0xdc>
 8007872:	f8c8 7000 	str.w	r7, [r8]
 8007876:	e00f      	b.n	8007898 <_malloc_r+0xa8>
 8007878:	6822      	ldr	r2, [r4, #0]
 800787a:	1b52      	subs	r2, r2, r5
 800787c:	d420      	bmi.n	80078c0 <_malloc_r+0xd0>
 800787e:	2a0b      	cmp	r2, #11
 8007880:	d917      	bls.n	80078b2 <_malloc_r+0xc2>
 8007882:	1961      	adds	r1, r4, r5
 8007884:	42a3      	cmp	r3, r4
 8007886:	6025      	str	r5, [r4, #0]
 8007888:	bf18      	it	ne
 800788a:	6059      	strne	r1, [r3, #4]
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	bf08      	it	eq
 8007890:	f8c8 1000 	streq.w	r1, [r8]
 8007894:	5162      	str	r2, [r4, r5]
 8007896:	604b      	str	r3, [r1, #4]
 8007898:	4630      	mov	r0, r6
 800789a:	f000 f82f 	bl	80078fc <__malloc_unlock>
 800789e:	f104 000b 	add.w	r0, r4, #11
 80078a2:	1d23      	adds	r3, r4, #4
 80078a4:	f020 0007 	bic.w	r0, r0, #7
 80078a8:	1ac2      	subs	r2, r0, r3
 80078aa:	bf1c      	itt	ne
 80078ac:	1a1b      	subne	r3, r3, r0
 80078ae:	50a3      	strne	r3, [r4, r2]
 80078b0:	e7af      	b.n	8007812 <_malloc_r+0x22>
 80078b2:	6862      	ldr	r2, [r4, #4]
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	bf0c      	ite	eq
 80078b8:	f8c8 2000 	streq.w	r2, [r8]
 80078bc:	605a      	strne	r2, [r3, #4]
 80078be:	e7eb      	b.n	8007898 <_malloc_r+0xa8>
 80078c0:	4623      	mov	r3, r4
 80078c2:	6864      	ldr	r4, [r4, #4]
 80078c4:	e7ae      	b.n	8007824 <_malloc_r+0x34>
 80078c6:	463c      	mov	r4, r7
 80078c8:	687f      	ldr	r7, [r7, #4]
 80078ca:	e7b6      	b.n	800783a <_malloc_r+0x4a>
 80078cc:	461a      	mov	r2, r3
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d1fb      	bne.n	80078cc <_malloc_r+0xdc>
 80078d4:	2300      	movs	r3, #0
 80078d6:	6053      	str	r3, [r2, #4]
 80078d8:	e7de      	b.n	8007898 <_malloc_r+0xa8>
 80078da:	230c      	movs	r3, #12
 80078dc:	6033      	str	r3, [r6, #0]
 80078de:	4630      	mov	r0, r6
 80078e0:	f000 f80c 	bl	80078fc <__malloc_unlock>
 80078e4:	e794      	b.n	8007810 <_malloc_r+0x20>
 80078e6:	6005      	str	r5, [r0, #0]
 80078e8:	e7d6      	b.n	8007898 <_malloc_r+0xa8>
 80078ea:	bf00      	nop
 80078ec:	2000095c 	.word	0x2000095c

080078f0 <__malloc_lock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	@ (80078f8 <__malloc_lock+0x8>)
 80078f2:	f7ff bf0f 	b.w	8007714 <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	20000954 	.word	0x20000954

080078fc <__malloc_unlock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	@ (8007904 <__malloc_unlock+0x8>)
 80078fe:	f7ff bf0a 	b.w	8007716 <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	20000954 	.word	0x20000954

08007908 <__ssputs_r>:
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	688e      	ldr	r6, [r1, #8]
 800790e:	461f      	mov	r7, r3
 8007910:	42be      	cmp	r6, r7
 8007912:	680b      	ldr	r3, [r1, #0]
 8007914:	4682      	mov	sl, r0
 8007916:	460c      	mov	r4, r1
 8007918:	4690      	mov	r8, r2
 800791a:	d82d      	bhi.n	8007978 <__ssputs_r+0x70>
 800791c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007924:	d026      	beq.n	8007974 <__ssputs_r+0x6c>
 8007926:	6965      	ldr	r5, [r4, #20]
 8007928:	6909      	ldr	r1, [r1, #16]
 800792a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800792e:	eba3 0901 	sub.w	r9, r3, r1
 8007932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007936:	1c7b      	adds	r3, r7, #1
 8007938:	444b      	add	r3, r9
 800793a:	106d      	asrs	r5, r5, #1
 800793c:	429d      	cmp	r5, r3
 800793e:	bf38      	it	cc
 8007940:	461d      	movcc	r5, r3
 8007942:	0553      	lsls	r3, r2, #21
 8007944:	d527      	bpl.n	8007996 <__ssputs_r+0x8e>
 8007946:	4629      	mov	r1, r5
 8007948:	f7ff ff52 	bl	80077f0 <_malloc_r>
 800794c:	4606      	mov	r6, r0
 800794e:	b360      	cbz	r0, 80079aa <__ssputs_r+0xa2>
 8007950:	6921      	ldr	r1, [r4, #16]
 8007952:	464a      	mov	r2, r9
 8007954:	f000 fae8 	bl	8007f28 <memcpy>
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800795e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007962:	81a3      	strh	r3, [r4, #12]
 8007964:	6126      	str	r6, [r4, #16]
 8007966:	6165      	str	r5, [r4, #20]
 8007968:	444e      	add	r6, r9
 800796a:	eba5 0509 	sub.w	r5, r5, r9
 800796e:	6026      	str	r6, [r4, #0]
 8007970:	60a5      	str	r5, [r4, #8]
 8007972:	463e      	mov	r6, r7
 8007974:	42be      	cmp	r6, r7
 8007976:	d900      	bls.n	800797a <__ssputs_r+0x72>
 8007978:	463e      	mov	r6, r7
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	4632      	mov	r2, r6
 800797e:	4641      	mov	r1, r8
 8007980:	f000 faa8 	bl	8007ed4 <memmove>
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	1b9b      	subs	r3, r3, r6
 8007988:	60a3      	str	r3, [r4, #8]
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	4433      	add	r3, r6
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	2000      	movs	r0, #0
 8007992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007996:	462a      	mov	r2, r5
 8007998:	f000 fad4 	bl	8007f44 <_realloc_r>
 800799c:	4606      	mov	r6, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	d1e0      	bne.n	8007964 <__ssputs_r+0x5c>
 80079a2:	6921      	ldr	r1, [r4, #16]
 80079a4:	4650      	mov	r0, sl
 80079a6:	f7ff feb7 	bl	8007718 <_free_r>
 80079aa:	230c      	movs	r3, #12
 80079ac:	f8ca 3000 	str.w	r3, [sl]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	e7e9      	b.n	8007992 <__ssputs_r+0x8a>
	...

080079c0 <_svfiprintf_r>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	4698      	mov	r8, r3
 80079c6:	898b      	ldrh	r3, [r1, #12]
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	b09d      	sub	sp, #116	@ 0x74
 80079cc:	4607      	mov	r7, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	d510      	bpl.n	80079f6 <_svfiprintf_r+0x36>
 80079d4:	690b      	ldr	r3, [r1, #16]
 80079d6:	b973      	cbnz	r3, 80079f6 <_svfiprintf_r+0x36>
 80079d8:	2140      	movs	r1, #64	@ 0x40
 80079da:	f7ff ff09 	bl	80077f0 <_malloc_r>
 80079de:	6028      	str	r0, [r5, #0]
 80079e0:	6128      	str	r0, [r5, #16]
 80079e2:	b930      	cbnz	r0, 80079f2 <_svfiprintf_r+0x32>
 80079e4:	230c      	movs	r3, #12
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	b01d      	add	sp, #116	@ 0x74
 80079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f2:	2340      	movs	r3, #64	@ 0x40
 80079f4:	616b      	str	r3, [r5, #20]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079fa:	2320      	movs	r3, #32
 80079fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a04:	2330      	movs	r3, #48	@ 0x30
 8007a06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ba4 <_svfiprintf_r+0x1e4>
 8007a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a0e:	f04f 0901 	mov.w	r9, #1
 8007a12:	4623      	mov	r3, r4
 8007a14:	469a      	mov	sl, r3
 8007a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a1a:	b10a      	cbz	r2, 8007a20 <_svfiprintf_r+0x60>
 8007a1c:	2a25      	cmp	r2, #37	@ 0x25
 8007a1e:	d1f9      	bne.n	8007a14 <_svfiprintf_r+0x54>
 8007a20:	ebba 0b04 	subs.w	fp, sl, r4
 8007a24:	d00b      	beq.n	8007a3e <_svfiprintf_r+0x7e>
 8007a26:	465b      	mov	r3, fp
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f7ff ff6b 	bl	8007908 <__ssputs_r>
 8007a32:	3001      	adds	r0, #1
 8007a34:	f000 80a7 	beq.w	8007b86 <_svfiprintf_r+0x1c6>
 8007a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a3a:	445a      	add	r2, fp
 8007a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 809f 	beq.w	8007b86 <_svfiprintf_r+0x1c6>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a52:	f10a 0a01 	add.w	sl, sl, #1
 8007a56:	9304      	str	r3, [sp, #16]
 8007a58:	9307      	str	r3, [sp, #28]
 8007a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a60:	4654      	mov	r4, sl
 8007a62:	2205      	movs	r2, #5
 8007a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a68:	484e      	ldr	r0, [pc, #312]	@ (8007ba4 <_svfiprintf_r+0x1e4>)
 8007a6a:	f7f8 fbb9 	bl	80001e0 <memchr>
 8007a6e:	9a04      	ldr	r2, [sp, #16]
 8007a70:	b9d8      	cbnz	r0, 8007aaa <_svfiprintf_r+0xea>
 8007a72:	06d0      	lsls	r0, r2, #27
 8007a74:	bf44      	itt	mi
 8007a76:	2320      	movmi	r3, #32
 8007a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a7c:	0711      	lsls	r1, r2, #28
 8007a7e:	bf44      	itt	mi
 8007a80:	232b      	movmi	r3, #43	@ 0x2b
 8007a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a86:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a8c:	d015      	beq.n	8007aba <_svfiprintf_r+0xfa>
 8007a8e:	9a07      	ldr	r2, [sp, #28]
 8007a90:	4654      	mov	r4, sl
 8007a92:	2000      	movs	r0, #0
 8007a94:	f04f 0c0a 	mov.w	ip, #10
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a9e:	3b30      	subs	r3, #48	@ 0x30
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	d94b      	bls.n	8007b3c <_svfiprintf_r+0x17c>
 8007aa4:	b1b0      	cbz	r0, 8007ad4 <_svfiprintf_r+0x114>
 8007aa6:	9207      	str	r2, [sp, #28]
 8007aa8:	e014      	b.n	8007ad4 <_svfiprintf_r+0x114>
 8007aaa:	eba0 0308 	sub.w	r3, r0, r8
 8007aae:	fa09 f303 	lsl.w	r3, r9, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	46a2      	mov	sl, r4
 8007ab8:	e7d2      	b.n	8007a60 <_svfiprintf_r+0xa0>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	1d19      	adds	r1, r3, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	9103      	str	r1, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bfbb      	ittet	lt
 8007ac6:	425b      	neglt	r3, r3
 8007ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8007acc:	9307      	strge	r3, [sp, #28]
 8007ace:	9307      	strlt	r3, [sp, #28]
 8007ad0:	bfb8      	it	lt
 8007ad2:	9204      	strlt	r2, [sp, #16]
 8007ad4:	7823      	ldrb	r3, [r4, #0]
 8007ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ad8:	d10a      	bne.n	8007af0 <_svfiprintf_r+0x130>
 8007ada:	7863      	ldrb	r3, [r4, #1]
 8007adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ade:	d132      	bne.n	8007b46 <_svfiprintf_r+0x186>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1d1a      	adds	r2, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	9203      	str	r2, [sp, #12]
 8007ae8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aec:	3402      	adds	r4, #2
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bb4 <_svfiprintf_r+0x1f4>
 8007af4:	7821      	ldrb	r1, [r4, #0]
 8007af6:	2203      	movs	r2, #3
 8007af8:	4650      	mov	r0, sl
 8007afa:	f7f8 fb71 	bl	80001e0 <memchr>
 8007afe:	b138      	cbz	r0, 8007b10 <_svfiprintf_r+0x150>
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	eba0 000a 	sub.w	r0, r0, sl
 8007b06:	2240      	movs	r2, #64	@ 0x40
 8007b08:	4082      	lsls	r2, r0
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	3401      	adds	r4, #1
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b14:	4824      	ldr	r0, [pc, #144]	@ (8007ba8 <_svfiprintf_r+0x1e8>)
 8007b16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b1a:	2206      	movs	r2, #6
 8007b1c:	f7f8 fb60 	bl	80001e0 <memchr>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d036      	beq.n	8007b92 <_svfiprintf_r+0x1d2>
 8007b24:	4b21      	ldr	r3, [pc, #132]	@ (8007bac <_svfiprintf_r+0x1ec>)
 8007b26:	bb1b      	cbnz	r3, 8007b70 <_svfiprintf_r+0x1b0>
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	3307      	adds	r3, #7
 8007b2c:	f023 0307 	bic.w	r3, r3, #7
 8007b30:	3308      	adds	r3, #8
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b36:	4433      	add	r3, r6
 8007b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3a:	e76a      	b.n	8007a12 <_svfiprintf_r+0x52>
 8007b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b40:	460c      	mov	r4, r1
 8007b42:	2001      	movs	r0, #1
 8007b44:	e7a8      	b.n	8007a98 <_svfiprintf_r+0xd8>
 8007b46:	2300      	movs	r3, #0
 8007b48:	3401      	adds	r4, #1
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f04f 0c0a 	mov.w	ip, #10
 8007b52:	4620      	mov	r0, r4
 8007b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b58:	3a30      	subs	r2, #48	@ 0x30
 8007b5a:	2a09      	cmp	r2, #9
 8007b5c:	d903      	bls.n	8007b66 <_svfiprintf_r+0x1a6>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0c6      	beq.n	8007af0 <_svfiprintf_r+0x130>
 8007b62:	9105      	str	r1, [sp, #20]
 8007b64:	e7c4      	b.n	8007af0 <_svfiprintf_r+0x130>
 8007b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7f0      	b.n	8007b52 <_svfiprintf_r+0x192>
 8007b70:	ab03      	add	r3, sp, #12
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	462a      	mov	r2, r5
 8007b76:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <_svfiprintf_r+0x1f0>)
 8007b78:	a904      	add	r1, sp, #16
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f3af 8000 	nop.w
 8007b80:	1c42      	adds	r2, r0, #1
 8007b82:	4606      	mov	r6, r0
 8007b84:	d1d6      	bne.n	8007b34 <_svfiprintf_r+0x174>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	065b      	lsls	r3, r3, #25
 8007b8a:	f53f af2d 	bmi.w	80079e8 <_svfiprintf_r+0x28>
 8007b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b90:	e72c      	b.n	80079ec <_svfiprintf_r+0x2c>
 8007b92:	ab03      	add	r3, sp, #12
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	462a      	mov	r2, r5
 8007b98:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <_svfiprintf_r+0x1f0>)
 8007b9a:	a904      	add	r1, sp, #16
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f000 f879 	bl	8007c94 <_printf_i>
 8007ba2:	e7ed      	b.n	8007b80 <_svfiprintf_r+0x1c0>
 8007ba4:	08008180 	.word	0x08008180
 8007ba8:	0800818a 	.word	0x0800818a
 8007bac:	00000000 	.word	0x00000000
 8007bb0:	08007909 	.word	0x08007909
 8007bb4:	08008186 	.word	0x08008186

08007bb8 <_printf_common>:
 8007bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	4698      	mov	r8, r3
 8007bc0:	688a      	ldr	r2, [r1, #8]
 8007bc2:	690b      	ldr	r3, [r1, #16]
 8007bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bfb8      	it	lt
 8007bcc:	4613      	movlt	r3, r2
 8007bce:	6033      	str	r3, [r6, #0]
 8007bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	b10a      	cbz	r2, 8007bde <_printf_common+0x26>
 8007bda:	3301      	adds	r3, #1
 8007bdc:	6033      	str	r3, [r6, #0]
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	0699      	lsls	r1, r3, #26
 8007be2:	bf42      	ittt	mi
 8007be4:	6833      	ldrmi	r3, [r6, #0]
 8007be6:	3302      	addmi	r3, #2
 8007be8:	6033      	strmi	r3, [r6, #0]
 8007bea:	6825      	ldr	r5, [r4, #0]
 8007bec:	f015 0506 	ands.w	r5, r5, #6
 8007bf0:	d106      	bne.n	8007c00 <_printf_common+0x48>
 8007bf2:	f104 0a19 	add.w	sl, r4, #25
 8007bf6:	68e3      	ldr	r3, [r4, #12]
 8007bf8:	6832      	ldr	r2, [r6, #0]
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	dc26      	bgt.n	8007c4e <_printf_common+0x96>
 8007c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	3b00      	subs	r3, #0
 8007c08:	bf18      	it	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	0692      	lsls	r2, r2, #26
 8007c0e:	d42b      	bmi.n	8007c68 <_printf_common+0xb0>
 8007c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c14:	4641      	mov	r1, r8
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c8      	blx	r9
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d01e      	beq.n	8007c5c <_printf_common+0xa4>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	6922      	ldr	r2, [r4, #16]
 8007c22:	f003 0306 	and.w	r3, r3, #6
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	bf02      	ittt	eq
 8007c2a:	68e5      	ldreq	r5, [r4, #12]
 8007c2c:	6833      	ldreq	r3, [r6, #0]
 8007c2e:	1aed      	subeq	r5, r5, r3
 8007c30:	68a3      	ldr	r3, [r4, #8]
 8007c32:	bf0c      	ite	eq
 8007c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c38:	2500      	movne	r5, #0
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bfc4      	itt	gt
 8007c3e:	1a9b      	subgt	r3, r3, r2
 8007c40:	18ed      	addgt	r5, r5, r3
 8007c42:	2600      	movs	r6, #0
 8007c44:	341a      	adds	r4, #26
 8007c46:	42b5      	cmp	r5, r6
 8007c48:	d11a      	bne.n	8007c80 <_printf_common+0xc8>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e008      	b.n	8007c60 <_printf_common+0xa8>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4652      	mov	r2, sl
 8007c52:	4641      	mov	r1, r8
 8007c54:	4638      	mov	r0, r7
 8007c56:	47c8      	blx	r9
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d103      	bne.n	8007c64 <_printf_common+0xac>
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c64:	3501      	adds	r5, #1
 8007c66:	e7c6      	b.n	8007bf6 <_printf_common+0x3e>
 8007c68:	18e1      	adds	r1, r4, r3
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	2030      	movs	r0, #48	@ 0x30
 8007c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c72:	4422      	add	r2, r4
 8007c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	e7c7      	b.n	8007c10 <_printf_common+0x58>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4622      	mov	r2, r4
 8007c84:	4641      	mov	r1, r8
 8007c86:	4638      	mov	r0, r7
 8007c88:	47c8      	blx	r9
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0e6      	beq.n	8007c5c <_printf_common+0xa4>
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7d9      	b.n	8007c46 <_printf_common+0x8e>
	...

08007c94 <_printf_i>:
 8007c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	7e0f      	ldrb	r7, [r1, #24]
 8007c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c9c:	2f78      	cmp	r7, #120	@ 0x78
 8007c9e:	4691      	mov	r9, r2
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	469a      	mov	sl, r3
 8007ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007caa:	d807      	bhi.n	8007cbc <_printf_i+0x28>
 8007cac:	2f62      	cmp	r7, #98	@ 0x62
 8007cae:	d80a      	bhi.n	8007cc6 <_printf_i+0x32>
 8007cb0:	2f00      	cmp	r7, #0
 8007cb2:	f000 80d2 	beq.w	8007e5a <_printf_i+0x1c6>
 8007cb6:	2f58      	cmp	r7, #88	@ 0x58
 8007cb8:	f000 80b9 	beq.w	8007e2e <_printf_i+0x19a>
 8007cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cc4:	e03a      	b.n	8007d3c <_printf_i+0xa8>
 8007cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cca:	2b15      	cmp	r3, #21
 8007ccc:	d8f6      	bhi.n	8007cbc <_printf_i+0x28>
 8007cce:	a101      	add	r1, pc, #4	@ (adr r1, 8007cd4 <_printf_i+0x40>)
 8007cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d41 	.word	0x08007d41
 8007cdc:	08007cbd 	.word	0x08007cbd
 8007ce0:	08007cbd 	.word	0x08007cbd
 8007ce4:	08007cbd 	.word	0x08007cbd
 8007ce8:	08007cbd 	.word	0x08007cbd
 8007cec:	08007d41 	.word	0x08007d41
 8007cf0:	08007cbd 	.word	0x08007cbd
 8007cf4:	08007cbd 	.word	0x08007cbd
 8007cf8:	08007cbd 	.word	0x08007cbd
 8007cfc:	08007cbd 	.word	0x08007cbd
 8007d00:	08007e41 	.word	0x08007e41
 8007d04:	08007d6b 	.word	0x08007d6b
 8007d08:	08007dfb 	.word	0x08007dfb
 8007d0c:	08007cbd 	.word	0x08007cbd
 8007d10:	08007cbd 	.word	0x08007cbd
 8007d14:	08007e63 	.word	0x08007e63
 8007d18:	08007cbd 	.word	0x08007cbd
 8007d1c:	08007d6b 	.word	0x08007d6b
 8007d20:	08007cbd 	.word	0x08007cbd
 8007d24:	08007cbd 	.word	0x08007cbd
 8007d28:	08007e03 	.word	0x08007e03
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6032      	str	r2, [r6, #0]
 8007d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e09d      	b.n	8007e7c <_printf_i+0x1e8>
 8007d40:	6833      	ldr	r3, [r6, #0]
 8007d42:	6820      	ldr	r0, [r4, #0]
 8007d44:	1d19      	adds	r1, r3, #4
 8007d46:	6031      	str	r1, [r6, #0]
 8007d48:	0606      	lsls	r6, r0, #24
 8007d4a:	d501      	bpl.n	8007d50 <_printf_i+0xbc>
 8007d4c:	681d      	ldr	r5, [r3, #0]
 8007d4e:	e003      	b.n	8007d58 <_printf_i+0xc4>
 8007d50:	0645      	lsls	r5, r0, #25
 8007d52:	d5fb      	bpl.n	8007d4c <_printf_i+0xb8>
 8007d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	da03      	bge.n	8007d64 <_printf_i+0xd0>
 8007d5c:	232d      	movs	r3, #45	@ 0x2d
 8007d5e:	426d      	negs	r5, r5
 8007d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d64:	4859      	ldr	r0, [pc, #356]	@ (8007ecc <_printf_i+0x238>)
 8007d66:	230a      	movs	r3, #10
 8007d68:	e011      	b.n	8007d8e <_printf_i+0xfa>
 8007d6a:	6821      	ldr	r1, [r4, #0]
 8007d6c:	6833      	ldr	r3, [r6, #0]
 8007d6e:	0608      	lsls	r0, r1, #24
 8007d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d74:	d402      	bmi.n	8007d7c <_printf_i+0xe8>
 8007d76:	0649      	lsls	r1, r1, #25
 8007d78:	bf48      	it	mi
 8007d7a:	b2ad      	uxthmi	r5, r5
 8007d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d7e:	4853      	ldr	r0, [pc, #332]	@ (8007ecc <_printf_i+0x238>)
 8007d80:	6033      	str	r3, [r6, #0]
 8007d82:	bf14      	ite	ne
 8007d84:	230a      	movne	r3, #10
 8007d86:	2308      	moveq	r3, #8
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d8e:	6866      	ldr	r6, [r4, #4]
 8007d90:	60a6      	str	r6, [r4, #8]
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	bfa2      	ittt	ge
 8007d96:	6821      	ldrge	r1, [r4, #0]
 8007d98:	f021 0104 	bicge.w	r1, r1, #4
 8007d9c:	6021      	strge	r1, [r4, #0]
 8007d9e:	b90d      	cbnz	r5, 8007da4 <_printf_i+0x110>
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	d04b      	beq.n	8007e3c <_printf_i+0x1a8>
 8007da4:	4616      	mov	r6, r2
 8007da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007daa:	fb03 5711 	mls	r7, r3, r1, r5
 8007dae:	5dc7      	ldrb	r7, [r0, r7]
 8007db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007db4:	462f      	mov	r7, r5
 8007db6:	42bb      	cmp	r3, r7
 8007db8:	460d      	mov	r5, r1
 8007dba:	d9f4      	bls.n	8007da6 <_printf_i+0x112>
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d10b      	bne.n	8007dd8 <_printf_i+0x144>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	07df      	lsls	r7, r3, #31
 8007dc4:	d508      	bpl.n	8007dd8 <_printf_i+0x144>
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	6861      	ldr	r1, [r4, #4]
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	bfde      	ittt	le
 8007dce:	2330      	movle	r3, #48	@ 0x30
 8007dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dd8:	1b92      	subs	r2, r2, r6
 8007dda:	6122      	str	r2, [r4, #16]
 8007ddc:	f8cd a000 	str.w	sl, [sp]
 8007de0:	464b      	mov	r3, r9
 8007de2:	aa03      	add	r2, sp, #12
 8007de4:	4621      	mov	r1, r4
 8007de6:	4640      	mov	r0, r8
 8007de8:	f7ff fee6 	bl	8007bb8 <_printf_common>
 8007dec:	3001      	adds	r0, #1
 8007dee:	d14a      	bne.n	8007e86 <_printf_i+0x1f2>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	b004      	add	sp, #16
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	f043 0320 	orr.w	r3, r3, #32
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	4833      	ldr	r0, [pc, #204]	@ (8007ed0 <_printf_i+0x23c>)
 8007e04:	2778      	movs	r7, #120	@ 0x78
 8007e06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	6831      	ldr	r1, [r6, #0]
 8007e0e:	061f      	lsls	r7, r3, #24
 8007e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e14:	d402      	bmi.n	8007e1c <_printf_i+0x188>
 8007e16:	065f      	lsls	r7, r3, #25
 8007e18:	bf48      	it	mi
 8007e1a:	b2ad      	uxthmi	r5, r5
 8007e1c:	6031      	str	r1, [r6, #0]
 8007e1e:	07d9      	lsls	r1, r3, #31
 8007e20:	bf44      	itt	mi
 8007e22:	f043 0320 	orrmi.w	r3, r3, #32
 8007e26:	6023      	strmi	r3, [r4, #0]
 8007e28:	b11d      	cbz	r5, 8007e32 <_printf_i+0x19e>
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	e7ac      	b.n	8007d88 <_printf_i+0xf4>
 8007e2e:	4827      	ldr	r0, [pc, #156]	@ (8007ecc <_printf_i+0x238>)
 8007e30:	e7e9      	b.n	8007e06 <_printf_i+0x172>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f023 0320 	bic.w	r3, r3, #32
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	e7f6      	b.n	8007e2a <_printf_i+0x196>
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	e7bd      	b.n	8007dbc <_printf_i+0x128>
 8007e40:	6833      	ldr	r3, [r6, #0]
 8007e42:	6825      	ldr	r5, [r4, #0]
 8007e44:	6961      	ldr	r1, [r4, #20]
 8007e46:	1d18      	adds	r0, r3, #4
 8007e48:	6030      	str	r0, [r6, #0]
 8007e4a:	062e      	lsls	r6, r5, #24
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	d501      	bpl.n	8007e54 <_printf_i+0x1c0>
 8007e50:	6019      	str	r1, [r3, #0]
 8007e52:	e002      	b.n	8007e5a <_printf_i+0x1c6>
 8007e54:	0668      	lsls	r0, r5, #25
 8007e56:	d5fb      	bpl.n	8007e50 <_printf_i+0x1bc>
 8007e58:	8019      	strh	r1, [r3, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	4616      	mov	r6, r2
 8007e60:	e7bc      	b.n	8007ddc <_printf_i+0x148>
 8007e62:	6833      	ldr	r3, [r6, #0]
 8007e64:	1d1a      	adds	r2, r3, #4
 8007e66:	6032      	str	r2, [r6, #0]
 8007e68:	681e      	ldr	r6, [r3, #0]
 8007e6a:	6862      	ldr	r2, [r4, #4]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7f8 f9b6 	bl	80001e0 <memchr>
 8007e74:	b108      	cbz	r0, 8007e7a <_printf_i+0x1e6>
 8007e76:	1b80      	subs	r0, r0, r6
 8007e78:	6060      	str	r0, [r4, #4]
 8007e7a:	6863      	ldr	r3, [r4, #4]
 8007e7c:	6123      	str	r3, [r4, #16]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e84:	e7aa      	b.n	8007ddc <_printf_i+0x148>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d0ad      	beq.n	8007df0 <_printf_i+0x15c>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	079b      	lsls	r3, r3, #30
 8007e98:	d413      	bmi.n	8007ec2 <_printf_i+0x22e>
 8007e9a:	68e0      	ldr	r0, [r4, #12]
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	4298      	cmp	r0, r3
 8007ea0:	bfb8      	it	lt
 8007ea2:	4618      	movlt	r0, r3
 8007ea4:	e7a6      	b.n	8007df4 <_printf_i+0x160>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4640      	mov	r0, r8
 8007eae:	47d0      	blx	sl
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d09d      	beq.n	8007df0 <_printf_i+0x15c>
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	68e3      	ldr	r3, [r4, #12]
 8007eb8:	9903      	ldr	r1, [sp, #12]
 8007eba:	1a5b      	subs	r3, r3, r1
 8007ebc:	42ab      	cmp	r3, r5
 8007ebe:	dcf2      	bgt.n	8007ea6 <_printf_i+0x212>
 8007ec0:	e7eb      	b.n	8007e9a <_printf_i+0x206>
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	f104 0619 	add.w	r6, r4, #25
 8007ec8:	e7f5      	b.n	8007eb6 <_printf_i+0x222>
 8007eca:	bf00      	nop
 8007ecc:	08008191 	.word	0x08008191
 8007ed0:	080081a2 	.word	0x080081a2

08007ed4 <memmove>:
 8007ed4:	4288      	cmp	r0, r1
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	eb01 0402 	add.w	r4, r1, r2
 8007edc:	d902      	bls.n	8007ee4 <memmove+0x10>
 8007ede:	4284      	cmp	r4, r0
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	d807      	bhi.n	8007ef4 <memmove+0x20>
 8007ee4:	1e43      	subs	r3, r0, #1
 8007ee6:	42a1      	cmp	r1, r4
 8007ee8:	d008      	beq.n	8007efc <memmove+0x28>
 8007eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ef2:	e7f8      	b.n	8007ee6 <memmove+0x12>
 8007ef4:	4402      	add	r2, r0
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	428a      	cmp	r2, r1
 8007efa:	d100      	bne.n	8007efe <memmove+0x2a>
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f06:	e7f7      	b.n	8007ef8 <memmove+0x24>

08007f08 <_sbrk_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d06      	ldr	r5, [pc, #24]	@ (8007f24 <_sbrk_r+0x1c>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	602b      	str	r3, [r5, #0]
 8007f14:	f7f8 fe80 	bl	8000c18 <_sbrk>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_sbrk_r+0x1a>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_sbrk_r+0x1a>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	20000950 	.word	0x20000950

08007f28 <memcpy>:
 8007f28:	440a      	add	r2, r1
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f30:	d100      	bne.n	8007f34 <memcpy+0xc>
 8007f32:	4770      	bx	lr
 8007f34:	b510      	push	{r4, lr}
 8007f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f3e:	4291      	cmp	r1, r2
 8007f40:	d1f9      	bne.n	8007f36 <memcpy+0xe>
 8007f42:	bd10      	pop	{r4, pc}

08007f44 <_realloc_r>:
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	4680      	mov	r8, r0
 8007f4a:	4615      	mov	r5, r2
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	b921      	cbnz	r1, 8007f5a <_realloc_r+0x16>
 8007f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f54:	4611      	mov	r1, r2
 8007f56:	f7ff bc4b 	b.w	80077f0 <_malloc_r>
 8007f5a:	b92a      	cbnz	r2, 8007f68 <_realloc_r+0x24>
 8007f5c:	f7ff fbdc 	bl	8007718 <_free_r>
 8007f60:	2400      	movs	r4, #0
 8007f62:	4620      	mov	r0, r4
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	f000 f81a 	bl	8007fa0 <_malloc_usable_size_r>
 8007f6c:	4285      	cmp	r5, r0
 8007f6e:	4606      	mov	r6, r0
 8007f70:	d802      	bhi.n	8007f78 <_realloc_r+0x34>
 8007f72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f76:	d8f4      	bhi.n	8007f62 <_realloc_r+0x1e>
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f7ff fc38 	bl	80077f0 <_malloc_r>
 8007f80:	4607      	mov	r7, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d0ec      	beq.n	8007f60 <_realloc_r+0x1c>
 8007f86:	42b5      	cmp	r5, r6
 8007f88:	462a      	mov	r2, r5
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	bf28      	it	cs
 8007f8e:	4632      	movcs	r2, r6
 8007f90:	f7ff ffca 	bl	8007f28 <memcpy>
 8007f94:	4621      	mov	r1, r4
 8007f96:	4640      	mov	r0, r8
 8007f98:	f7ff fbbe 	bl	8007718 <_free_r>
 8007f9c:	463c      	mov	r4, r7
 8007f9e:	e7e0      	b.n	8007f62 <_realloc_r+0x1e>

08007fa0 <_malloc_usable_size_r>:
 8007fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa4:	1f18      	subs	r0, r3, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bfbc      	itt	lt
 8007faa:	580b      	ldrlt	r3, [r1, r0]
 8007fac:	18c0      	addlt	r0, r0, r3
 8007fae:	4770      	bx	lr

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
